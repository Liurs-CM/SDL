!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/liurs/github/sdl2/stu/demo/manul/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
DELAY_TIME	src/defs.h	/^#define DELAY_TIME /;"	d
FPS	src/defs.h	/^#define FPS /;"	d
Game	src/Game.h	/^        Game() {}$/;"	f	class:Game
Game	src/Game.h	/^class Game$/;"	c
Instance	src/Game.h	/^        static Game* Instance()$/;"	f	class:Game	typeref:typename:Game *
Instance	src/TextureManager.h	/^        static TextureManager* Instance()$/;"	f	class:TextureManager	typeref:typename:TextureManager *
SCR_H	src/defs.h	/^#define SCR_H /;"	d
SCR_W	src/defs.h	/^#define SCR_W /;"	d
SCR_X	src/defs.h	/^#define SCR_X /;"	d
SCR_Y	src/defs.h	/^#define SCR_Y /;"	d
TextureManager	src/TextureManager.h	/^        TextureManager(){}$/;"	f	class:TextureManager
TextureManager	src/TextureManager.h	/^class TextureManager$/;"	c
TheGame	src/Game.h	/^typedef Game TheGame;$/;"	t	typeref:typename:Game
TheTextureManager	src/TextureManager.h	/^typedef TextureManager TheTextureManager;$/;"	t	typeref:typename:TextureManager
Vector2D	src/Vector2D.h	/^        Vector2D(float x, float y): m_x(x), m_y(y) {}$/;"	f	class:Vector2D
Vector2D	src/Vector2D.h	/^class Vector2D$/;"	c
__Game__	src/Game.h	/^#define __Game__$/;"	d
__TextureManager__	src/TextureManager.h	/^#define __TextureManager__$/;"	d
__Vector2D__	src/Vector2D.h	/^#define __Vector2D__$/;"	d
__def__	src/defs.h	/^#define __def__$/;"	d
clean	src/Game.cpp	/^void Game::clean()$/;"	f	class:Game	typeref:typename:void
clearFromTextureMap	src/TextureManager.cpp	/^void TextureManager::clearFromTextureMap(std::string id)$/;"	f	class:TextureManager	typeref:typename:void
draw	src/TextureManager.cpp	/^void TextureManager::draw($/;"	f	class:TextureManager	typeref:typename:void
frameStart	src/Game.h	/^        Uint32 frameStart;$/;"	m	class:Game	typeref:typename:Uint32
frameTime	src/Game.h	/^        Uint32 frameTime;$/;"	m	class:Game	typeref:typename:Uint32
getRenderer	src/Game.h	/^        SDL_Renderer* getRenderer() const { return m_pRenderer; }$/;"	f	class:Game	typeref:typename:SDL_Renderer *
getX	src/Vector2D.h	/^        float getX() { return m_x; }$/;"	f	class:Vector2D	typeref:typename:float
getY	src/Vector2D.h	/^        float getY() { return m_y; }$/;"	f	class:Vector2D	typeref:typename:float
handleEvents	src/Game.cpp	/^void Game::handleEvents()$/;"	f	class:Game	typeref:typename:void
init	src/Game.cpp	/^bool Game::init(const char* title, int x_pos, int y_pos, int width, int height, bool fullscreen)$/;"	f	class:Game	typeref:typename:bool
length	src/Vector2D.h	/^        float length() { return sqrt(m_x * m_x + m_y * m_y); }$/;"	f	class:Vector2D	typeref:typename:float
load	src/TextureManager.cpp	/^bool TextureManager::load($/;"	f	class:TextureManager	typeref:typename:bool
m_bRunning	src/Game.h	/^        bool m_bRunning;$/;"	m	class:Game	typeref:typename:bool
m_gameHeight	src/Game.h	/^        int m_gameHeight;$/;"	m	class:Game	typeref:typename:int
m_gameWidth	src/Game.h	/^        int m_gameWidth;$/;"	m	class:Game	typeref:typename:int
m_pRenderer	src/Game.h	/^        SDL_Renderer* m_pRenderer;$/;"	m	class:Game	typeref:typename:SDL_Renderer *
m_pWindow	src/Game.h	/^        SDL_Window* m_pWindow;$/;"	m	class:Game	typeref:typename:SDL_Window *
m_textureMap	src/TextureManager.h	/^        std::map<std::string, SDL_Texture*> m_textureMap;$/;"	m	class:TextureManager	typeref:typename:std::map<std::string,SDL_Texture * >
m_x	src/Vector2D.h	/^        float m_x;$/;"	m	class:Vector2D	typeref:typename:float
m_y	src/Vector2D.h	/^        float m_y;$/;"	m	class:Vector2D	typeref:typename:float
main	src/main.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
normalize	src/Vector2D.h	/^        void normalize()$/;"	f	class:Vector2D	typeref:typename:void
operator *	src/Vector2D.h	/^        Vector2D operator*(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator *=	src/Vector2D.h	/^        Vector2D& operator*=(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator +	src/Vector2D.h	/^        Vector2D operator+(const Vector2D& v2) const$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator +=	src/Vector2D.h	/^        Vector2D& operator+=(const Vector2D& v2)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator -	src/Vector2D.h	/^        Vector2D operator-(const Vector2D& v2) const$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator -=	src/Vector2D.h	/^        Vector2D& operator-=(const Vector2D& v2)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator /	src/Vector2D.h	/^        Vector2D operator\/(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator /=	src/Vector2D.h	/^        Vector2D& operator\/=(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
quit	src/Game.h	/^	    void quit() { m_bRunning = false; }$/;"	f	class:Game	typeref:typename:void
render	src/Game.cpp	/^void Game::render()$/;"	f	class:Game	typeref:typename:void
running	src/Game.h	/^        bool running() { frameStart = SDL_GetTicks(); return m_bRunning; }$/;"	f	class:Game	typeref:typename:bool
s_pInstance	src/Game.cpp	/^Game* Game::s_pInstance = 0;$/;"	m	class:Game	typeref:typename:Game *
s_pInstance	src/Game.h	/^        static Game* s_pInstance;$/;"	m	class:Game	typeref:typename:Game *
s_pInstance	src/TextureManager.cpp	/^TextureManager* TextureManager::s_pInstance = 0;$/;"	m	class:TextureManager	typeref:typename:TextureManager *
s_pInstance	src/TextureManager.h	/^        static TextureManager* s_pInstance;$/;"	m	class:TextureManager	typeref:typename:TextureManager *
setX	src/Vector2D.h	/^        void setX(float x) { m_x = x; }$/;"	f	class:Vector2D	typeref:typename:void
setY	src/Vector2D.h	/^        void setY(float y) { m_y = y; }$/;"	f	class:Vector2D	typeref:typename:void
syncFPS	src/Game.cpp	/^void Game::syncFPS()$/;"	f	class:Game	typeref:typename:void
update	src/Game.cpp	/^void Game::update()$/;"	f	class:Game	typeref:typename:void
~Game	src/Game.h	/^        ~Game() {}$/;"	f	class:Game
