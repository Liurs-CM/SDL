!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FIELD_DESCRIPTION!XML	uri	/uri associated with name prefix/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!XML	i,id	/id attributes/
!_TAG_KIND_DESCRIPTION!XML	n,nsprefix	/namespace prefixes/
!_TAG_KIND_DESCRIPTION!XML	r,root	/root elements/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PARSER_VERSION!XML	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/liurs/github/sdl2/stu/chpt6/xml/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
Accept	./src/lib/tinyxml.cpp	/^bool TiXmlComment::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlComment	typeref:typename:bool
Accept	./src/lib/tinyxml.cpp	/^bool TiXmlDeclaration::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDeclaration	typeref:typename:bool
Accept	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlDocument	typeref:typename:bool
Accept	./src/lib/tinyxml.cpp	/^bool TiXmlElement::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlElement	typeref:typename:bool
Accept	./src/lib/tinyxml.cpp	/^bool TiXmlText::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlText	typeref:typename:bool
Accept	./src/lib/tinyxml.cpp	/^bool TiXmlUnknown::Accept( TiXmlVisitor* visitor ) const$/;"	f	class:TiXmlUnknown	typeref:typename:bool
Add	./src/lib/tinyxml.cpp	/^void TiXmlAttributeSet::Add( TiXmlAttribute* addMe )$/;"	f	class:TiXmlAttributeSet	typeref:typename:void
AnimatedGraphic	./src/AnimatedGraphic.cpp	/^AnimatedGraphic::AnimatedGraphic() : SDLGameObject()$/;"	f	class:AnimatedGraphic
AnimatedGraphic	./src/AnimatedGraphic.h	/^class AnimatedGraphic : public SDLGameObject$/;"	c
AnimatedGraphicCreator	./src/AnimatedGraphic.h	/^class AnimatedGraphicCreator : public BaseCreator$/;"	c
Attribute	./src/lib/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name ) const$/;"	f	class:TiXmlElement	typeref:typename:const char *
Attribute	./src/lib/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, double* d ) const$/;"	f	class:TiXmlElement	typeref:typename:const char *
Attribute	./src/lib/tinyxml.cpp	/^const char* TiXmlElement::Attribute( const char* name, int* i ) const$/;"	f	class:TiXmlElement	typeref:typename:const char *
Attribute	./src/lib/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name ) const$/;"	f	class:TiXmlElement	typeref:typename:const std::string *
Attribute	./src/lib/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, double* d ) const$/;"	f	class:TiXmlElement	typeref:typename:const std::string *
Attribute	./src/lib/tinyxml.cpp	/^const std::string* TiXmlElement::Attribute( const std::string& name, int* i ) const$/;"	f	class:TiXmlElement	typeref:typename:const std::string *
BaseCreator	./src/GameObjectFactory.h	/^class BaseCreator$/;"	c
Blank	./src/lib/tinyxmlparser.cpp	/^bool TiXmlText::Blank() const$/;"	f	class:TiXmlText	typeref:typename:bool
CDATA	./src/lib/tinyxml.h	/^	bool CDATA() const				{ return cdata; }$/;"	f	class:TiXmlText	typeref:typename:bool
CLICKED	./src/MenuButton.h	/^            CLICKED = 2$/;"	e	enum:MenuButton::button_state
CStr	./src/lib/tinyxml.h	/^	const char* CStr()								{ return buffer.c_str(); }$/;"	f	class:TiXmlPrinter	typeref:typename:const char *
Callback	./src/MenuState.h	/^        typedef void(*Callback)();$/;"	t	class:MenuState	typeref:typename:void (*)()
Child	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( const char* value, int count ) const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
Child	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::Child( int count ) const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
Child	./src/lib/tinyxml.h	/^	TiXmlHandle Child( const std::string& _value, int index ) const			{ return Child( _value.c_str(/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
ChildElement	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( const char* value, int count ) const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
ChildElement	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::ChildElement( int count ) const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
ChildElement	./src/lib/tinyxml.h	/^	TiXmlHandle ChildElement( const std::string& _value, int index ) const	{ return ChildElement( _/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
Clear	./src/lib/tinyxml.cpp	/^void TiXmlNode::Clear()$/;"	f	class:TiXmlNode	typeref:typename:void
Clear	./src/lib/tinyxml.h	/^	void Clear()		{ row = col = -1; }$/;"	f	struct:TiXmlCursor	typeref:typename:void
ClearError	./src/lib/tinyxml.h	/^	void ClearError()						{	error = false; $/;"	f	class:TiXmlDocument	typeref:typename:void
ClearThis	./src/lib/tinyxml.cpp	/^void TiXmlElement::ClearThis()$/;"	f	class:TiXmlElement	typeref:typename:void
Clone	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlComment::Clone() const$/;"	f	class:TiXmlComment	typeref:typename:TiXmlNode *
Clone	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlDeclaration::Clone() const$/;"	f	class:TiXmlDeclaration	typeref:typename:TiXmlNode *
Clone	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlDocument::Clone() const$/;"	f	class:TiXmlDocument	typeref:typename:TiXmlNode *
Clone	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlElement::Clone() const$/;"	f	class:TiXmlElement	typeref:typename:TiXmlNode *
Clone	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlText::Clone() const$/;"	f	class:TiXmlText	typeref:typename:TiXmlNode *
Clone	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlUnknown::Clone() const$/;"	f	class:TiXmlUnknown	typeref:typename:TiXmlNode *
Column	./src/lib/tinyxml.h	/^	int Column() const		{ return location.col + 1; }	\/\/\/< See Row()$/;"	f	class:TiXmlBase	typeref:typename:int
ConvertUTF32ToUTF8	./src/lib/tinyxmlparser.cpp	/^void TiXmlBase::ConvertUTF32ToUTF8( unsigned long input, char* output, int* length )$/;"	f	class:TiXmlBase	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlComment::CopyTo( TiXmlComment* target ) const$/;"	f	class:TiXmlComment	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlDeclaration::CopyTo( TiXmlDeclaration* target ) const$/;"	f	class:TiXmlDeclaration	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlDocument::CopyTo( TiXmlDocument* target ) const$/;"	f	class:TiXmlDocument	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlElement::CopyTo( TiXmlElement* target ) const$/;"	f	class:TiXmlElement	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlNode::CopyTo( TiXmlNode* target ) const$/;"	f	class:TiXmlNode	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlText::CopyTo( TiXmlText* target ) const$/;"	f	class:TiXmlText	typeref:typename:void
CopyTo	./src/lib/tinyxml.cpp	/^void TiXmlUnknown::CopyTo( TiXmlUnknown* target ) const$/;"	f	class:TiXmlUnknown	typeref:typename:void
Cursor	./src/lib/tinyxmlparser.cpp	/^	const TiXmlCursor& Cursor() const	{ return cursor; }$/;"	f	class:TiXmlParsingData	typeref:typename:const TiXmlCursor &	file:
DEBUG	./src/lib/tinyxml.h	/^#define DEBUG$/;"	d
DELAY_TIME	./src/main.cpp	/^const int DELAY_TIME = 1000.0f \/ FPS;$/;"	v	typeref:typename:const int
DoIndent	./src/lib/tinyxml.h	/^	void DoIndent()	{$/;"	f	class:TiXmlPrinter	typeref:typename:void
DoLineBreak	./src/lib/tinyxml.h	/^	void DoLineBreak() {$/;"	f	class:TiXmlPrinter	typeref:typename:void
DoubleValue	./src/lib/tinyxml.cpp	/^double  TiXmlAttribute::DoubleValue() const$/;"	f	class:TiXmlAttribute	typeref:typename:double
Element	./src/lib/tinyxml.h	/^	TiXmlElement* Element() const	{ return ToElement(); }$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlElement *
EncodeString	./src/lib/tinyxml.cpp	/^void TiXmlBase::EncodeString( const TIXML_STRING& str, TIXML_STRING* outString )$/;"	f	class:TiXmlBase	typeref:typename:void
Encoding	./src/lib/tinyxml.h	/^	const char *Encoding() const		{ return encoding.c_str (); }$/;"	f	class:TiXmlDeclaration	typeref:typename:const char *
Enemy	./src/Enemy.cpp	/^Enemy::Enemy() : SDLGameObject() $/;"	f	class:Enemy
Enemy	./src/Enemy.h	/^class Enemy : public SDLGameObject$/;"	c
EnemyCreator	./src/Enemy.h	/^class EnemyCreator : public BaseCreator$/;"	c
Entity	./src/lib/tinyxml.h	/^	struct Entity$/;"	s	class:TiXmlBase
Error	./src/lib/tinyxml.h	/^	bool Error() const						{ return error; }$/;"	f	class:TiXmlDocument	typeref:typename:bool
ErrorCol	./src/lib/tinyxml.h	/^	int ErrorCol() const	{ return errorLocation.col+1; }	\/\/\/< The column where the error occured/;"	f	class:TiXmlDocument	typeref:typename:int
ErrorDesc	./src/lib/tinyxml.h	/^	const char * ErrorDesc() const	{ return errorDesc.c_str (); }$/;"	f	class:TiXmlDocument	typeref:typename:const char *
ErrorId	./src/lib/tinyxml.h	/^	int ErrorId()	const				{ return errorId; }$/;"	f	class:TiXmlDocument	typeref:typename:int
ErrorRow	./src/lib/tinyxml.h	/^	int ErrorRow() const	{ return errorLocation.row+1; }$/;"	f	class:TiXmlDocument	typeref:typename:int
FPS	./src/main.cpp	/^const int FPS = 165;$/;"	v	typeref:typename:const int
Find	./src/lib/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const char* name ) const$/;"	f	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute *
Find	./src/lib/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::Find( const std::string& name ) const$/;"	f	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute *
FindOrCreate	./src/lib/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const char* _name )$/;"	f	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute *
FindOrCreate	./src/lib/tinyxml.cpp	/^TiXmlAttribute* TiXmlAttributeSet::FindOrCreate( const std::string& _name )$/;"	f	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute *
First	./src/lib/tinyxml.h	/^	TiXmlAttribute* First()					{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next; }$/;"	f	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute *
First	./src/lib/tinyxml.h	/^	const TiXmlAttribute* First()	const	{ return ( sentinel.next == &sentinel ) ? 0 : sentinel.next/;"	f	class:TiXmlAttributeSet	typeref:typename:const TiXmlAttribute *
FirstAttribute	./src/lib/tinyxml.h	/^	TiXmlAttribute* FirstAttribute() 				{ return attributeSet.First(); }$/;"	f	class:TiXmlElement	typeref:typename:TiXmlAttribute *
FirstAttribute	./src/lib/tinyxml.h	/^	const TiXmlAttribute* FirstAttribute() const	{ return attributeSet.First(); }		\/\/\/< Access t/;"	f	class:TiXmlElement	typeref:typename:const TiXmlAttribute *
FirstChild	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild( const char * value ) const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
FirstChild	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChild() const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
FirstChild	./src/lib/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::FirstChild( const char * _value ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
FirstChild	./src/lib/tinyxml.h	/^	TiXmlHandle FirstChild( const std::string& _value ) const				{ return FirstChild( _value.c_str(/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
FirstChild	./src/lib/tinyxml.h	/^	TiXmlNode* FirstChild( const char * _value ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
FirstChild	./src/lib/tinyxml.h	/^	TiXmlNode* FirstChild( const std::string& _value )				{	return FirstChild (_value.c_str ());	}	/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
FirstChild	./src/lib/tinyxml.h	/^	TiXmlNode* FirstChild()						{ return firstChild; }$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
FirstChild	./src/lib/tinyxml.h	/^	const TiXmlNode* FirstChild( const std::string& _value ) const	{	return FirstChild (_value.c_st/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
FirstChild	./src/lib/tinyxml.h	/^	const TiXmlNode* FirstChild()	const		{ return firstChild; }	\/\/\/< The first child of this nod/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
FirstChildElement	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement( const char * value ) const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
FirstChildElement	./src/lib/tinyxml.cpp	/^TiXmlHandle TiXmlHandle::FirstChildElement() const$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
FirstChildElement	./src/lib/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement( const char * _value ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
FirstChildElement	./src/lib/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::FirstChildElement() const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
FirstChildElement	./src/lib/tinyxml.h	/^	TiXmlElement* FirstChildElement( const char * _value ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
FirstChildElement	./src/lib/tinyxml.h	/^	TiXmlElement* FirstChildElement( const std::string& _value )				{	return FirstChildElement (_va/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
FirstChildElement	./src/lib/tinyxml.h	/^	TiXmlElement* FirstChildElement() {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
FirstChildElement	./src/lib/tinyxml.h	/^	TiXmlHandle FirstChildElement( const std::string& _value ) const		{ return FirstChildElement( _/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
FirstChildElement	./src/lib/tinyxml.h	/^	const TiXmlElement* FirstChildElement( const std::string& _value ) const	{	return FirstChildEle/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
Game	./src/Game.h	/^        Game() {}$/;"	f	class:Game
Game	./src/Game.h	/^class Game$/;"	c
GameObject	./src/GameObject.h	/^        GameObject() {}$/;"	f	class:GameObject
GameObject	./src/GameObject.h	/^class GameObject$/;"	c
GameObjectFactory	./src/GameObjectFactory.h	/^class GameObjectFactory$/;"	c
GameOverState	./src/GameOverState.h	/^class GameOverState : public GameState$/;"	c
GameState	./src/GameState.h	/^class GameState$/;"	c
GameStateMachine	./src/GameStateMachine.h	/^        GameStateMachine() : newState(nullptr), popStateFlag(false), changeStateFlag(false) {}$/;"	f	class:GameStateMachine
GameStateMachine	./src/GameStateMachine.h	/^class GameStateMachine$/;"	c
GetChar	./src/lib/tinyxml.h	/^	inline static const char* GetChar( const char* p, char* _value, int* length, TiXmlEncoding enco/;"	f	class:TiXmlBase	typeref:typename:const char *
GetDocument	./src/lib/tinyxml.cpp	/^const TiXmlDocument* TiXmlNode::GetDocument() const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlDocument *
GetDocument	./src/lib/tinyxml.h	/^	TiXmlDocument* GetDocument() {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlDocument *
GetEntity	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlBase::GetEntity( const char* p, char* value, int* length, TiXmlEncoding encodin/;"	f	class:TiXmlBase	typeref:typename:const char *
GetText	./src/lib/tinyxml.cpp	/^const char* TiXmlElement::GetText() const$/;"	f	class:TiXmlElement	typeref:typename:const char *
GetUserData	./src/lib/tinyxml.h	/^	const void* GetUserData() const 		{ return userData; }	\/\/\/< Get a pointer to arbitrary user /;"	f	class:TiXmlBase	typeref:typename:const void *
GetUserData	./src/lib/tinyxml.h	/^	void* GetUserData()						{ return userData; }	\/\/\/< Get a pointer to arbitrary user data.$/;"	f	class:TiXmlBase	typeref:typename:void *
Identify	./src/lib/tinyxmlparser.cpp	/^TiXmlNode* TiXmlNode::Identify( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
Indent	./src/lib/tinyxml.h	/^	const char* Indent()							{ return indent.c_str(); }$/;"	f	class:TiXmlPrinter	typeref:typename:const char *
InputHandler	./src/InputHandler.cpp	/^InputHandler::InputHandler() : m_mousePosition(new Vector2D(0, 0))$/;"	f	class:InputHandler
InputHandler	./src/InputHandler.h	/^class InputHandler$/;"	c
InsertAfterChild	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertAfterChild( TiXmlNode* afterThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
InsertBeforeChild	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertBeforeChild( TiXmlNode* beforeThis, const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
InsertEndChild	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlNode::InsertEndChild( const TiXmlNode& addThis )$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
Instance	./src/Game.h	/^        static Game* Instance()$/;"	f	class:Game	typeref:typename:Game *
Instance	./src/GameObjectFactory.h	/^        static GameObjectFactory* Instance()$/;"	f	class:GameObjectFactory	typeref:typename:GameObjectFactory *
Instance	./src/InputHandler.h	/^        static InputHandler* Instance()$/;"	f	class:InputHandler	typeref:typename:InputHandler *
Instance	./src/TextureManager.h	/^        static TextureManager* Instance()$/;"	f	class:TextureManager	typeref:typename:TextureManager *
IntValue	./src/lib/tinyxml.cpp	/^int TiXmlAttribute::IntValue() const$/;"	f	class:TiXmlAttribute	typeref:typename:int
IsAlpha	./src/lib/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlpha( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	typeref:typename:int
IsAlphaNum	./src/lib/tinyxmlparser.cpp	/^\/*static*\/ int TiXmlBase::IsAlphaNum( unsigned char anyByte, TiXmlEncoding \/*encoding*\/ )$/;"	f	class:TiXmlBase	typeref:typename:int
IsWhiteSpace	./src/lib/tinyxml.h	/^	inline static bool IsWhiteSpace( char c )		$/;"	f	class:TiXmlBase	typeref:typename:bool
IsWhiteSpace	./src/lib/tinyxml.h	/^	inline static bool IsWhiteSpace( int c )$/;"	f	class:TiXmlBase	typeref:typename:bool
IsWhiteSpaceCondensed	./src/lib/tinyxml.h	/^	static bool IsWhiteSpaceCondensed()						{ return condenseWhiteSpace; }$/;"	f	class:TiXmlBase	typeref:typename:bool
IterateChildren	./src/lib/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
IterateChildren	./src/lib/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::IterateChildren( const char * val, const TiXmlNode* previous ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
IterateChildren	./src/lib/tinyxml.h	/^	TiXmlNode* IterateChildren( const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
IterateChildren	./src/lib/tinyxml.h	/^	TiXmlNode* IterateChildren( const char * _value, const TiXmlNode* previous ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
IterateChildren	./src/lib/tinyxml.h	/^	TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) {	return Ite/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
IterateChildren	./src/lib/tinyxml.h	/^	const TiXmlNode* IterateChildren( const std::string& _value, const TiXmlNode* previous ) const	/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
LEFT	./src/InputHandler.h	/^	LEFT = 0,$/;"	e	enum:mouse_buttons
Last	./src/lib/tinyxml.h	/^	TiXmlAttribute* Last()					{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev; }$/;"	f	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute *
Last	./src/lib/tinyxml.h	/^	const TiXmlAttribute* Last() const		{ return ( sentinel.prev == &sentinel ) ? 0 : sentinel.prev/;"	f	class:TiXmlAttributeSet	typeref:typename:const TiXmlAttribute *
LastAttribute	./src/lib/tinyxml.h	/^	TiXmlAttribute* LastAttribute()					{ return attributeSet.Last(); }$/;"	f	class:TiXmlElement	typeref:typename:TiXmlAttribute *
LastAttribute	./src/lib/tinyxml.h	/^	const TiXmlAttribute* LastAttribute()	const 	{ return attributeSet.Last(); }		\/\/\/< Access th/;"	f	class:TiXmlElement	typeref:typename:const TiXmlAttribute *
LastChild	./src/lib/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::LastChild( const char * _value ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
LastChild	./src/lib/tinyxml.h	/^	TiXmlNode* LastChild( const char * _value ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
LastChild	./src/lib/tinyxml.h	/^	TiXmlNode* LastChild( const std::string& _value )				{	return LastChild (_value.c_str ());	}	\//;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
LastChild	./src/lib/tinyxml.h	/^	TiXmlNode* LastChild()	{ return lastChild; }$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
LastChild	./src/lib/tinyxml.h	/^	const TiXmlNode* LastChild( const std::string& _value ) const	{	return LastChild (_value.c_str /;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
LastChild	./src/lib/tinyxml.h	/^	const TiXmlNode* LastChild() const	{ return lastChild; }		\/\/\/ The last child of this node. W/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
LineBreak	./src/lib/tinyxml.h	/^	const char* LineBreak()							{ return lineBreak.c_str(); }$/;"	f	class:TiXmlPrinter	typeref:typename:const char *
LinkEndChild	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlNode::LinkEndChild( TiXmlNode* node )$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
LoadFile	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( FILE* file, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	typeref:typename:bool
LoadFile	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	typeref:typename:bool
LoadFile	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::LoadFile( const char* _filename, TiXmlEncoding encoding )$/;"	f	class:TiXmlDocument	typeref:typename:bool
LoadFile	./src/lib/tinyxml.h	/^	bool LoadFile( const std::string& filename, TiXmlEncoding encoding = TIXML_DEFAULT_ENCODING )		/;"	f	class:TiXmlDocument	typeref:typename:bool
LoaderParams	./src/LoaderParams.h	/^        LoaderParams(int x, int y, int width, int height, std::string textureID, int numFrames, /;"	f	class:LoaderParams
LoaderParams	./src/LoaderParams.h	/^class LoaderParams$/;"	c
MAX_ENTITY_LENGTH	./src/lib/tinyxml.h	/^		MAX_ENTITY_LENGTH = 6$/;"	e	enum:TiXmlBase::__anon5f1029ea0303
MIDDLE	./src/InputHandler.h	/^	MIDDLE = 1,$/;"	e	enum:mouse_buttons
MOUSE_OUT	./src/MenuButton.h	/^            MOUSE_OUT = 0,$/;"	e	enum:MenuButton::button_state
MOUSE_OVER	./src/MenuButton.h	/^            MOUSE_OVER = 1,$/;"	e	enum:MenuButton::button_state
MainMenuState	./src/MainMenuState.h	/^class MainMenuState : public MenuState$/;"	c
MenuButton	./src/MenuButton.cpp	/^MenuButton::MenuButton() : SDLGameObject()$/;"	f	class:MenuButton
MenuButton	./src/MenuButton.h	/^class MenuButton : public SDLGameObject$/;"	c
MenuButtonCreator	./src/MenuButton.h	/^class MenuButtonCreator : public BaseCreator$/;"	c
MenuState	./src/MenuState.h	/^class MenuState : public GameState$/;"	c
NUM_ENTITY	./src/lib/tinyxml.h	/^		NUM_ENTITY = 5,$/;"	e	enum:TiXmlBase::__anon5f1029ea0303
Name	./src/lib/tinyxml.h	/^	const char*		Name()  const		{ return name.c_str(); }		\/\/\/< Return the name of this attribute/;"	f	class:TiXmlAttribute	typeref:typename:const char *
NameTStr	./src/lib/tinyxml.h	/^	const TIXML_STRING& NameTStr() const { return name; }$/;"	f	class:TiXmlAttribute	typeref:typename:const TIXML_STRING &
Next	./src/lib/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Next() const$/;"	f	class:TiXmlAttribute	typeref:typename:const TiXmlAttribute *
Next	./src/lib/tinyxml.h	/^	TiXmlAttribute* Next() {$/;"	f	class:TiXmlAttribute	typeref:typename:TiXmlAttribute *
NextSibling	./src/lib/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::NextSibling( const char * _value ) const $/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
NextSibling	./src/lib/tinyxml.h	/^	TiXmlNode* NextSibling( const char* _next ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
NextSibling	./src/lib/tinyxml.h	/^	TiXmlNode* NextSibling( const std::string& _value) 					{	return NextSibling (_value.c_str ());/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
NextSibling	./src/lib/tinyxml.h	/^	TiXmlNode* NextSibling()							{ return next; }$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
NextSibling	./src/lib/tinyxml.h	/^	const TiXmlNode* NextSibling( const std::string& _value) const		{	return NextSibling (_value.c_/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
NextSibling	./src/lib/tinyxml.h	/^	const TiXmlNode* NextSibling() const				{ return next; }$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
NextSiblingElement	./src/lib/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement( const char * _value ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
NextSiblingElement	./src/lib/tinyxml.cpp	/^const TiXmlElement* TiXmlNode::NextSiblingElement() const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
NextSiblingElement	./src/lib/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const char *_next ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
NextSiblingElement	./src/lib/tinyxml.h	/^	TiXmlElement* NextSiblingElement( const std::string& _value)				{	return NextSiblingElement (_v/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
NextSiblingElement	./src/lib/tinyxml.h	/^	TiXmlElement* NextSiblingElement() {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
NextSiblingElement	./src/lib/tinyxml.h	/^	const TiXmlElement* NextSiblingElement( const std::string& _value) const	{	return NextSiblingEl/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
NoChildren	./src/lib/tinyxml.h	/^	bool NoChildren() const						{ return !firstChild; }$/;"	f	class:TiXmlNode	typeref:typename:bool
Node	./src/lib/tinyxml.h	/^	TiXmlNode* Node() const			{ return ToNode(); } $/;"	f	class:TiXmlHandle	typeref:typename:TiXmlNode *
NodeType	./src/lib/tinyxml.h	/^	enum NodeType$/;"	g	class:TiXmlNode
Parent	./src/lib/tinyxml.h	/^	TiXmlNode* Parent()							{ return parent; }$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
Parent	./src/lib/tinyxml.h	/^	const TiXmlNode* Parent() const				{ return parent; }$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlAttribute::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding/;"	f	class:TiXmlAttribute	typeref:typename:const char *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlComment::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlComment	typeref:typename:const char *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlDeclaration::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding _encod/;"	f	class:TiXmlDeclaration	typeref:typename:const char *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlDocument::Parse( const char* p, TiXmlParsingData* prevData, TiXmlEncoding encod/;"	f	class:TiXmlDocument	typeref:typename:const char *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlElement::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlElement	typeref:typename:const char *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlText::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlText	typeref:typename:const char *
Parse	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlUnknown::Parse( const char* p, TiXmlParsingData* data, TiXmlEncoding encoding )$/;"	f	class:TiXmlUnknown	typeref:typename:const char *
PauseState	./src/PauseState.h	/^class PauseState : public MenuState$/;"	c
PlayState	./src/PlayState.h	/^class PlayState : public GameState$/;"	c
Player	./src/Player.cpp	/^Player::Player() : SDLGameObject() {}$/;"	f	class:Player
Player	./src/Player.h	/^class Player : public SDLGameObject$/;"	c
PlayerCreator	./src/Player.h	/^class PlayerCreator : public BaseCreator$/;"	c
Previous	./src/lib/tinyxml.cpp	/^const TiXmlAttribute* TiXmlAttribute::Previous() const$/;"	f	class:TiXmlAttribute	typeref:typename:const TiXmlAttribute *
Previous	./src/lib/tinyxml.h	/^	TiXmlAttribute* Previous() {$/;"	f	class:TiXmlAttribute	typeref:typename:TiXmlAttribute *
PreviousSibling	./src/lib/tinyxml.cpp	/^const TiXmlNode* TiXmlNode::PreviousSibling( const char * _value ) const$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
PreviousSibling	./src/lib/tinyxml.h	/^	TiXmlNode* PreviousSibling( const char *_prev ) {$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
PreviousSibling	./src/lib/tinyxml.h	/^	TiXmlNode* PreviousSibling( const std::string& _value ) 			{	return PreviousSibling (_value.c_s/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
PreviousSibling	./src/lib/tinyxml.h	/^	TiXmlNode* PreviousSibling()						{ return prev; }$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
PreviousSibling	./src/lib/tinyxml.h	/^	const TiXmlNode* PreviousSibling( const std::string& _value ) const	{	return PreviousSibling (_/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
PreviousSibling	./src/lib/tinyxml.h	/^	const TiXmlNode* PreviousSibling() const			{ return prev; }$/;"	f	class:TiXmlNode	typeref:typename:const TiXmlNode *
Print	./src/lib/tinyxml.cpp	/^void TiXmlAttribute::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlAttribute	typeref:typename:void
Print	./src/lib/tinyxml.cpp	/^void TiXmlComment::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlComment	typeref:typename:void
Print	./src/lib/tinyxml.cpp	/^void TiXmlDeclaration::Print( FILE* cfile, int \/*depth*\/, TIXML_STRING* str ) const$/;"	f	class:TiXmlDeclaration	typeref:typename:void
Print	./src/lib/tinyxml.cpp	/^void TiXmlDocument::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlDocument	typeref:typename:void
Print	./src/lib/tinyxml.cpp	/^void TiXmlElement::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlElement	typeref:typename:void
Print	./src/lib/tinyxml.cpp	/^void TiXmlText::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlText	typeref:typename:void
Print	./src/lib/tinyxml.cpp	/^void TiXmlUnknown::Print( FILE* cfile, int depth ) const$/;"	f	class:TiXmlUnknown	typeref:typename:void
Print	./src/lib/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlAttribute	typeref:typename:void
Print	./src/lib/tinyxml.h	/^	virtual void Print( FILE* cfile, int depth ) const {$/;"	f	class:TiXmlDeclaration	typeref:typename:void
Print	./src/lib/tinyxml.h	/^	void Print() const						{ Print( stdout, 0 ); }$/;"	f	class:TiXmlDocument	typeref:typename:void
QueryBoolAttribute	./src/lib/tinyxml.cpp	/^int TiXmlElement::QueryBoolAttribute( const char* name, bool* bval ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryDoubleAttribute	./src/lib/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const char* name, double* dval ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryDoubleAttribute	./src/lib/tinyxml.cpp	/^int TiXmlElement::QueryDoubleAttribute( const std::string& name, double* dval ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryDoubleValue	./src/lib/tinyxml.cpp	/^int TiXmlAttribute::QueryDoubleValue( double* dval ) const$/;"	f	class:TiXmlAttribute	typeref:typename:int
QueryFloatAttribute	./src/lib/tinyxml.h	/^	int QueryFloatAttribute( const char* name, float* _value ) const {$/;"	f	class:TiXmlElement	typeref:typename:int
QueryIntAttribute	./src/lib/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const char* name, int* ival ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryIntAttribute	./src/lib/tinyxml.cpp	/^int TiXmlElement::QueryIntAttribute( const std::string& name, int* ival ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryIntValue	./src/lib/tinyxml.cpp	/^int TiXmlAttribute::QueryIntValue( int* ival ) const$/;"	f	class:TiXmlAttribute	typeref:typename:int
QueryStringAttribute	./src/lib/tinyxml.h	/^	int QueryStringAttribute( const char* name, std::string* _value ) const {$/;"	f	class:TiXmlElement	typeref:typename:int
QueryUnsignedAttribute	./src/lib/tinyxml.cpp	/^int TiXmlElement::QueryUnsignedAttribute( const char* name, unsigned* value ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryValueAttribute	./src/lib/tinyxml.h	/^	int QueryValueAttribute( const std::string& name, std::string* outValue ) const$/;"	f	class:TiXmlElement	typeref:typename:int
QueryValueAttribute	./src/lib/tinyxml.h	/^	template< typename T > int QueryValueAttribute( const std::string& name, T* outValue ) const$/;"	f	class:TiXmlElement	typeref:typename:int
RIGHT	./src/InputHandler.h	/^	RIGHT = 2$/;"	e	enum:mouse_buttons
ReadName	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadName( const char* p, TIXML_STRING * name, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	typeref:typename:const char *
ReadText	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlBase::ReadText(	const char* p, $/;"	f	class:TiXmlBase	typeref:typename:const char *
ReadValue	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlElement::ReadValue( const char* p, TiXmlParsingData* data, TiXmlEncoding encodi/;"	f	class:TiXmlElement	typeref:typename:const char *
Remove	./src/lib/tinyxml.cpp	/^void TiXmlAttributeSet::Remove( TiXmlAttribute* removeMe )$/;"	f	class:TiXmlAttributeSet	typeref:typename:void
RemoveAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::RemoveAttribute( const char * name )$/;"	f	class:TiXmlElement	typeref:typename:void
RemoveAttribute	./src/lib/tinyxml.h	/^	void RemoveAttribute( const std::string& name )	{	RemoveAttribute (name.c_str ());	}	\/\/\/< ST/;"	f	class:TiXmlElement	typeref:typename:void
RemoveChild	./src/lib/tinyxml.cpp	/^bool TiXmlNode::RemoveChild( TiXmlNode* removeThis )$/;"	f	class:TiXmlNode	typeref:typename:bool
Rep	./src/lib/tinystr.h	/^	struct Rep$/;"	s	class:TiXmlString
ReplaceChild	./src/lib/tinyxml.cpp	/^TiXmlNode* TiXmlNode::ReplaceChild( TiXmlNode* replaceThis, const TiXmlNode& withThis )$/;"	f	class:TiXmlNode	typeref:typename:TiXmlNode *
RootElement	./src/lib/tinyxml.h	/^	TiXmlElement* RootElement()					{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	typeref:typename:TiXmlElement *
RootElement	./src/lib/tinyxml.h	/^	const TiXmlElement* RootElement() const		{ return FirstChildElement(); }$/;"	f	class:TiXmlDocument	typeref:typename:const TiXmlElement *
Row	./src/lib/tinyxml.h	/^	int Row() const			{ return location.row + 1; }$/;"	f	class:TiXmlBase	typeref:typename:int
SDLGameObject	./src/SDLGameObject.cpp	/^SDLGameObject::SDLGameObject() : GameObject(), m_position(0,0), m_velocity(0,0), m_acceleration(/;"	f	class:SDLGameObject
SDLGameObject	./src/SDLGameObject.h	/^class SDLGameObject : public GameObject$/;"	c
SaveFile	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( FILE* fp ) const$/;"	f	class:TiXmlDocument	typeref:typename:bool
SaveFile	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::SaveFile( const char * filename ) const$/;"	f	class:TiXmlDocument	typeref:typename:bool
SaveFile	./src/lib/tinyxml.cpp	/^bool TiXmlDocument::SaveFile() const$/;"	f	class:TiXmlDocument	typeref:typename:bool
SaveFile	./src/lib/tinyxml.h	/^	bool SaveFile( const std::string& filename ) const		\/\/\/< STL std::string version.$/;"	f	class:TiXmlDocument	typeref:typename:bool
SetAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * cname, const char * cvalue )$/;"	f	class:TiXmlElement	typeref:typename:void
SetAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const char * name, int val )$/;"	f	class:TiXmlElement	typeref:typename:void
SetAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlElement	typeref:typename:void
SetAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::SetAttribute( const std::string& name, int val )$/;"	f	class:TiXmlElement	typeref:typename:void
SetCDATA	./src/lib/tinyxml.h	/^	void SetCDATA( bool _cdata )	{ cdata = _cdata; }$/;"	f	class:TiXmlText	typeref:typename:void
SetCondenseWhiteSpace	./src/lib/tinyxml.h	/^	static void SetCondenseWhiteSpace( bool condense )		{ condenseWhiteSpace = condense; }$/;"	f	class:TiXmlBase	typeref:typename:void
SetDocument	./src/lib/tinyxml.h	/^	void SetDocument( TiXmlDocument* doc )	{ document = doc; }$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetDoubleAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const char * name, double val )$/;"	f	class:TiXmlElement	typeref:typename:void
SetDoubleAttribute	./src/lib/tinyxml.cpp	/^void TiXmlElement::SetDoubleAttribute( const std::string& name, double val )$/;"	f	class:TiXmlElement	typeref:typename:void
SetDoubleValue	./src/lib/tinyxml.cpp	/^void TiXmlAttribute::SetDoubleValue( double _value )$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetError	./src/lib/tinyxmlparser.cpp	/^void TiXmlDocument::SetError( int err, const char* pError, TiXmlParsingData* data, TiXmlEncoding/;"	f	class:TiXmlDocument	typeref:typename:void
SetIndent	./src/lib/tinyxml.h	/^	void SetIndent( const char* _indent )			{ indent = _indent ? _indent : "" ; }$/;"	f	class:TiXmlPrinter	typeref:typename:void
SetIntValue	./src/lib/tinyxml.cpp	/^void TiXmlAttribute::SetIntValue( int _value )$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetLineBreak	./src/lib/tinyxml.h	/^	void SetLineBreak( const char* _lineBreak )		{ lineBreak = _lineBreak ? _lineBreak : ""; }$/;"	f	class:TiXmlPrinter	typeref:typename:void
SetName	./src/lib/tinyxml.h	/^	void SetName( const char* _name )	{ name = _name; }				\/\/\/< Set the name of this attribute.$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetName	./src/lib/tinyxml.h	/^	void SetName( const std::string& _name )	{ name = _name; }	$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetStreamPrinting	./src/lib/tinyxml.h	/^	void SetStreamPrinting()						{ indent = "";$/;"	f	class:TiXmlPrinter	typeref:typename:void
SetTabSize	./src/lib/tinyxml.h	/^	void SetTabSize( int _tabsize )		{ tabsize = _tabsize; }$/;"	f	class:TiXmlDocument	typeref:typename:void
SetUserData	./src/lib/tinyxml.h	/^	void  SetUserData( void* user )			{ userData = user; }	\/\/\/< Set a pointer to arbitrary user /;"	f	class:TiXmlBase	typeref:typename:void
SetValue	./src/lib/tinyxml.h	/^	void SetValue( const char* _value )	{ value = _value; }				\/\/\/< Set the value.$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetValue	./src/lib/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlAttribute	typeref:typename:void
SetValue	./src/lib/tinyxml.h	/^	void SetValue( const std::string& _value )	{ value = _value; }$/;"	f	class:TiXmlNode	typeref:typename:void
SetValue	./src/lib/tinyxml.h	/^	void SetValue(const char * _value) { value = _value;}$/;"	f	class:TiXmlNode	typeref:typename:void
Size	./src/lib/tinyxml.h	/^	size_t Size()									{ return buffer.size(); }$/;"	f	class:TiXmlPrinter	typeref:typename:size_t
SkipWhiteSpace	./src/lib/tinyxmlparser.cpp	/^const char* TiXmlBase::SkipWhiteSpace( const char* p, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	typeref:typename:const char *
Stamp	./src/lib/tinyxmlparser.cpp	/^void TiXmlParsingData::Stamp( const char* now, TiXmlEncoding encoding )$/;"	f	class:TiXmlParsingData	typeref:typename:void
Standalone	./src/lib/tinyxml.h	/^	const char *Standalone() const		{ return standalone.c_str (); }$/;"	f	class:TiXmlDeclaration	typeref:typename:const char *
StateParser	./src/StateParser.h	/^class StateParser$/;"	c
Str	./src/lib/tinyxml.h	/^	const std::string& Str()						{ return buffer; }$/;"	f	class:TiXmlPrinter	typeref:typename:const std::string &
StreamIn	./src/lib/tinyxmlparser.cpp	/^void TiXmlComment::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlComment	typeref:typename:void
StreamIn	./src/lib/tinyxmlparser.cpp	/^void TiXmlDeclaration::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDeclaration	typeref:typename:void
StreamIn	./src/lib/tinyxmlparser.cpp	/^void TiXmlDocument::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlDocument	typeref:typename:void
StreamIn	./src/lib/tinyxmlparser.cpp	/^void TiXmlElement::StreamIn (std::istream * in, TIXML_STRING * tag)$/;"	f	class:TiXmlElement	typeref:typename:void
StreamIn	./src/lib/tinyxmlparser.cpp	/^void TiXmlText::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlText	typeref:typename:void
StreamIn	./src/lib/tinyxmlparser.cpp	/^void TiXmlUnknown::StreamIn( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlUnknown	typeref:typename:void
StreamTo	./src/lib/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamTo( std::istream * in, int character, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	typeref:typename:bool
StreamWhiteSpace	./src/lib/tinyxmlparser.cpp	/^\/*static*\/ bool TiXmlBase::StreamWhiteSpace( std::istream * in, TIXML_STRING * tag )$/;"	f	class:TiXmlBase	typeref:typename:bool
StringEqual	./src/lib/tinyxmlparser.cpp	/^bool TiXmlBase::StringEqual( const char* p,$/;"	f	class:TiXmlBase	typeref:typename:bool
TINYXML_COMMENT	./src/lib/tinyxml.h	/^		TINYXML_COMMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DECLARATION	./src/lib/tinyxml.h	/^		TINYXML_DECLARATION,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_DOCUMENT	./src/lib/tinyxml.h	/^		TINYXML_DOCUMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_ELEMENT	./src/lib/tinyxml.h	/^		TINYXML_ELEMENT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_INCLUDED	./src/lib/tinyxml.h	/^#define TINYXML_INCLUDED$/;"	d
TINYXML_TEXT	./src/lib/tinyxml.h	/^		TINYXML_TEXT,$/;"	e	enum:TiXmlNode::NodeType
TINYXML_TYPECOUNT	./src/lib/tinyxml.h	/^		TINYXML_TYPECOUNT$/;"	e	enum:TiXmlNode::NodeType
TINYXML_UNKNOWN	./src/lib/tinyxml.h	/^		TINYXML_UNKNOWN,$/;"	e	enum:TiXmlNode::NodeType
TIXML_DEFAULT_ENCODING	./src/lib/tinyxml.h	/^const TiXmlEncoding TIXML_DEFAULT_ENCODING = TIXML_ENCODING_UNKNOWN;$/;"	v	typeref:typename:const TiXmlEncoding
TIXML_ENCODING_LEGACY	./src/lib/tinyxml.h	/^	TIXML_ENCODING_LEGACY$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UNKNOWN	./src/lib/tinyxml.h	/^	TIXML_ENCODING_UNKNOWN,$/;"	e	enum:TiXmlEncoding
TIXML_ENCODING_UTF8	./src/lib/tinyxml.h	/^	TIXML_ENCODING_UTF8,$/;"	e	enum:TiXmlEncoding
TIXML_ERROR	./src/lib/tinyxml.h	/^		TIXML_ERROR,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_DOCUMENT_EMPTY	./src/lib/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_EMPTY,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_DOCUMENT_TOP_ONLY	./src/lib/tinyxml.h	/^		TIXML_ERROR_DOCUMENT_TOP_ONLY,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_EMBEDDED_NULL	./src/lib/tinyxml.h	/^		TIXML_ERROR_EMBEDDED_NULL,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME	./src/lib/tinyxml.h	/^		TIXML_ERROR_FAILED_TO_READ_ELEMENT_NAME,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_OPENING_FILE	./src/lib/tinyxml.h	/^		TIXML_ERROR_OPENING_FILE,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_PARSING_CDATA	./src/lib/tinyxml.h	/^		TIXML_ERROR_PARSING_CDATA,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_PARSING_COMMENT	./src/lib/tinyxml.h	/^		TIXML_ERROR_PARSING_COMMENT,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_PARSING_DECLARATION	./src/lib/tinyxml.h	/^		TIXML_ERROR_PARSING_DECLARATION,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_PARSING_ELEMENT	./src/lib/tinyxml.h	/^		TIXML_ERROR_PARSING_ELEMENT,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_PARSING_EMPTY	./src/lib/tinyxml.h	/^		TIXML_ERROR_PARSING_EMPTY,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_PARSING_UNKNOWN	./src/lib/tinyxml.h	/^		TIXML_ERROR_PARSING_UNKNOWN,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_READING_ATTRIBUTES	./src/lib/tinyxml.h	/^		TIXML_ERROR_READING_ATTRIBUTES,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_READING_ELEMENT_VALUE	./src/lib/tinyxml.h	/^		TIXML_ERROR_READING_ELEMENT_VALUE,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_READING_END_TAG	./src/lib/tinyxml.h	/^		TIXML_ERROR_READING_END_TAG,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_ERROR_STRING_COUNT	./src/lib/tinyxml.h	/^		TIXML_ERROR_STRING_COUNT$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_EXPLICIT	./src/lib/tinystr.h	/^	#define TIXML_EXPLICIT /;"	d
TIXML_EXPLICIT	./src/lib/tinystr.h	/^	#define TIXML_EXPLICIT$/;"	d
TIXML_LOG	./src/lib/tinyxmlparser.cpp	/^#		define TIXML_LOG /;"	d	file:
TIXML_MAJOR_VERSION	./src/lib/tinyxml.h	/^const int TIXML_MAJOR_VERSION = 2;$/;"	v	typeref:typename:const int
TIXML_MINOR_VERSION	./src/lib/tinyxml.h	/^const int TIXML_MINOR_VERSION = 6;$/;"	v	typeref:typename:const int
TIXML_NO_ATTRIBUTE	./src/lib/tinyxml.h	/^	TIXML_NO_ATTRIBUTE,$/;"	e	enum:__anon5f1029ea0103
TIXML_NO_ERROR	./src/lib/tinyxml.h	/^		TIXML_NO_ERROR = 0,$/;"	e	enum:TiXmlBase::__anon5f1029ea0203
TIXML_PATCH_VERSION	./src/lib/tinyxml.h	/^const int TIXML_PATCH_VERSION = 2;$/;"	v	typeref:typename:const int
TIXML_SAFE	./src/lib/tinyxml.h	/^#define TIXML_SAFE$/;"	d
TIXML_SNPRINTF	./src/lib/tinyxml.h	/^		#define TIXML_SNPRINTF /;"	d
TIXML_SSCANF	./src/lib/tinyxml.h	/^		#define TIXML_SSCANF /;"	d
TIXML_STRING	./src/lib/tinyxml.h	/^	#define TIXML_STRING	/;"	d
TIXML_STRING_INCLUDED	./src/lib/tinystr.h	/^#define TIXML_STRING_INCLUDED$/;"	d
TIXML_SUCCESS	./src/lib/tinyxml.h	/^	TIXML_SUCCESS,$/;"	e	enum:__anon5f1029ea0103
TIXML_UTF_LEAD_0	./src/lib/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_0 = 0xefU;$/;"	v	typeref:typename:const unsigned char
TIXML_UTF_LEAD_1	./src/lib/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_1 = 0xbbU;$/;"	v	typeref:typename:const unsigned char
TIXML_UTF_LEAD_2	./src/lib/tinyxmlparser.cpp	/^const unsigned char TIXML_UTF_LEAD_2 = 0xbfU;$/;"	v	typeref:typename:const unsigned char
TIXML_WRONG_TYPE	./src/lib/tinyxml.h	/^	TIXML_WRONG_TYPE$/;"	e	enum:__anon5f1029ea0103
TabSize	./src/lib/tinyxml.h	/^	int TabSize() const	{ return tabsize; }$/;"	f	class:TiXmlDocument	typeref:typename:int
Text	./src/lib/tinyxml.h	/^	TiXmlText* Text() const			{ return ToText(); }$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlText *
TextureManager	./src/TextureManager.h	/^        TextureManager() {}$/;"	f	class:TextureManager
TextureManager	./src/TextureManager.h	/^class TextureManager$/;"	c
TheGame	./src/Game.h	/^typedef Game TheGame;$/;"	t	typeref:typename:Game
TheGameObjectFactory	./src/GameObjectFactory.h	/^typedef GameObjectFactory TheGameObjectFactory;$/;"	t	typeref:typename:GameObjectFactory
TheInputHandler	./src/InputHandler.h	/^typedef InputHandler TheInputHandler;$/;"	t	typeref:typename:InputHandler
TheTextureManager	./src/TextureManager.h	/^typedef TextureManager TheTextureManager;$/;"	t	typeref:typename:TextureManager
TiXmlAttribute	./src/lib/tinyxml.h	/^	TiXmlAttribute( const char * _name, const char * _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	./src/lib/tinyxml.h	/^	TiXmlAttribute( const std::string& _name, const std::string& _value )$/;"	f	class:TiXmlAttribute
TiXmlAttribute	./src/lib/tinyxml.h	/^	TiXmlAttribute() : TiXmlBase()$/;"	f	class:TiXmlAttribute
TiXmlAttribute	./src/lib/tinyxml.h	/^class TiXmlAttribute : public TiXmlBase$/;"	c
TiXmlAttributeSet	./src/lib/tinyxml.cpp	/^TiXmlAttributeSet::TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
TiXmlAttributeSet	./src/lib/tinyxml.h	/^class TiXmlAttributeSet$/;"	c
TiXmlBase	./src/lib/tinyxml.h	/^	TiXmlBase()	:	userData(0)		{}$/;"	f	class:TiXmlBase
TiXmlBase	./src/lib/tinyxml.h	/^class TiXmlBase$/;"	c
TiXmlComment	./src/lib/tinyxml.cpp	/^TiXmlComment::TiXmlComment( const TiXmlComment& copy ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT )$/;"	f	class:TiXmlComment
TiXmlComment	./src/lib/tinyxml.h	/^	TiXmlComment( const char* _value ) : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {$/;"	f	class:TiXmlComment
TiXmlComment	./src/lib/tinyxml.h	/^	TiXmlComment() : TiXmlNode( TiXmlNode::TINYXML_COMMENT ) {}$/;"	f	class:TiXmlComment
TiXmlComment	./src/lib/tinyxml.h	/^class TiXmlComment : public TiXmlNode$/;"	c
TiXmlCursor	./src/lib/tinyxml.h	/^	TiXmlCursor()		{ Clear(); }$/;"	f	struct:TiXmlCursor
TiXmlCursor	./src/lib/tinyxml.h	/^struct TiXmlCursor$/;"	s
TiXmlDeclaration	./src/lib/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration(	const std::string& _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	./src/lib/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	./src/lib/tinyxml.cpp	/^TiXmlDeclaration::TiXmlDeclaration( const char * _version,$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	./src/lib/tinyxml.h	/^	TiXmlDeclaration()   : TiXmlNode( TiXmlNode::TINYXML_DECLARATION ) {}$/;"	f	class:TiXmlDeclaration
TiXmlDeclaration	./src/lib/tinyxml.h	/^class TiXmlDeclaration : public TiXmlNode$/;"	c
TiXmlDocument	./src/lib/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const TiXmlDocument& copy ) : TiXmlNode( TiXmlNode::TINYXML_DOCUME/;"	f	class:TiXmlDocument
TiXmlDocument	./src/lib/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const char * documentName ) : TiXmlNode( TiXmlNode::TINYXML_DOCUME/;"	f	class:TiXmlDocument
TiXmlDocument	./src/lib/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument( const std::string& documentName ) : TiXmlNode( TiXmlNode::TINYXML_/;"	f	class:TiXmlDocument
TiXmlDocument	./src/lib/tinyxml.cpp	/^TiXmlDocument::TiXmlDocument() : TiXmlNode( TiXmlNode::TINYXML_DOCUMENT )$/;"	f	class:TiXmlDocument
TiXmlDocument	./src/lib/tinyxml.h	/^class TiXmlDocument : public TiXmlNode$/;"	c
TiXmlElement	./src/lib/tinyxml.cpp	/^TiXmlElement::TiXmlElement (const char * _value)$/;"	f	class:TiXmlElement
TiXmlElement	./src/lib/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const TiXmlElement& copy)$/;"	f	class:TiXmlElement
TiXmlElement	./src/lib/tinyxml.cpp	/^TiXmlElement::TiXmlElement( const std::string& _value ) $/;"	f	class:TiXmlElement
TiXmlElement	./src/lib/tinyxml.h	/^class TiXmlElement : public TiXmlNode$/;"	c
TiXmlEncoding	./src/lib/tinyxml.h	/^enum TiXmlEncoding$/;"	g
TiXmlFOpen	./src/lib/tinyxml.cpp	/^FILE* TiXmlFOpen( const char* filename, const char* mode )$/;"	f	typeref:typename:FILE *
TiXmlHandle	./src/lib/tinyxml.h	/^	TiXmlHandle( TiXmlNode* _node )					{ this->node = _node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	./src/lib/tinyxml.h	/^	TiXmlHandle( const TiXmlHandle& ref )			{ this->node = ref.node; }$/;"	f	class:TiXmlHandle
TiXmlHandle	./src/lib/tinyxml.h	/^class TiXmlHandle$/;"	c
TiXmlNode	./src/lib/tinyxml.cpp	/^TiXmlNode::TiXmlNode( NodeType _type ) : TiXmlBase()$/;"	f	class:TiXmlNode
TiXmlNode	./src/lib/tinyxml.h	/^class TiXmlNode : public TiXmlBase$/;"	c
TiXmlOutStream	./src/lib/tinystr.h	/^class TiXmlOutStream : public TiXmlString$/;"	c
TiXmlParsingData	./src/lib/tinyxmlparser.cpp	/^	TiXmlParsingData( const char* start, int _tabsize, int row, int col )$/;"	f	class:TiXmlParsingData	file:
TiXmlParsingData	./src/lib/tinyxmlparser.cpp	/^class TiXmlParsingData$/;"	c	file:
TiXmlPrinter	./src/lib/tinyxml.h	/^	TiXmlPrinter() : depth( 0 ), simpleTextPrint( false ),$/;"	f	class:TiXmlPrinter
TiXmlPrinter	./src/lib/tinyxml.h	/^class TiXmlPrinter : public TiXmlVisitor$/;"	c
TiXmlString	./src/lib/tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * copy) : rep_(0)$/;"	f	class:TiXmlString	typeref:typename:TIXML_EXPLICIT
TiXmlString	./src/lib/tinystr.h	/^	TIXML_EXPLICIT TiXmlString ( const char * str, size_type len) : rep_(0)$/;"	f	class:TiXmlString	typeref:typename:TIXML_EXPLICIT
TiXmlString	./src/lib/tinystr.h	/^	TiXmlString ( const TiXmlString & copy) : rep_(0)$/;"	f	class:TiXmlString
TiXmlString	./src/lib/tinystr.h	/^	TiXmlString () : rep_(&nullrep_)$/;"	f	class:TiXmlString
TiXmlString	./src/lib/tinystr.h	/^class TiXmlString$/;"	c
TiXmlText	./src/lib/tinyxml.h	/^	TiXmlText (const char * initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText
TiXmlText	./src/lib/tinyxml.h	/^	TiXmlText( const TiXmlText& copy ) : TiXmlNode( TiXmlNode::TINYXML_TEXT )	{ copy.CopyTo( this )/;"	f	class:TiXmlText
TiXmlText	./src/lib/tinyxml.h	/^	TiXmlText( const std::string& initValue ) : TiXmlNode (TiXmlNode::TINYXML_TEXT)$/;"	f	class:TiXmlText
TiXmlText	./src/lib/tinyxml.h	/^class TiXmlText : public TiXmlNode$/;"	c
TiXmlUnknown	./src/lib/tinyxml.h	/^	TiXmlUnknown( const TiXmlUnknown& copy ) : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )		{ copy.Copy/;"	f	class:TiXmlUnknown
TiXmlUnknown	./src/lib/tinyxml.h	/^	TiXmlUnknown() : TiXmlNode( TiXmlNode::TINYXML_UNKNOWN )	{}$/;"	f	class:TiXmlUnknown
TiXmlUnknown	./src/lib/tinyxml.h	/^class TiXmlUnknown : public TiXmlNode$/;"	c
TiXmlVisitor	./src/lib/tinyxml.h	/^class TiXmlVisitor$/;"	c
ToComment	./src/lib/tinyxml.h	/^	virtual		  TiXmlComment*  ToComment()		{ return this; } \/\/\/< Cast to a more defined type. Wi/;"	f	class:TiXmlComment	typeref:typename:TiXmlComment *
ToComment	./src/lib/tinyxml.h	/^	virtual TiXmlComment*           ToComment()     { return 0; } \/\/\/< Cast to a more defined ty/;"	f	class:TiXmlNode	typeref:typename:TiXmlComment *
ToComment	./src/lib/tinyxml.h	/^	virtual const TiXmlComment*     ToComment()     const { return 0; } \/\/\/< Cast to a more defi/;"	f	class:TiXmlNode	typeref:typename:const TiXmlComment *
ToComment	./src/lib/tinyxml.h	/^	virtual const TiXmlComment*  ToComment() const	{ return this; } \/\/\/< Cast to a more defined /;"	f	class:TiXmlComment	typeref:typename:const TiXmlComment *
ToDeclaration	./src/lib/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration()       { return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlDeclaration	typeref:typename:TiXmlDeclaration *
ToDeclaration	./src/lib/tinyxml.h	/^	virtual TiXmlDeclaration*       ToDeclaration() { return 0; } \/\/\/< Cast to a more defined ty/;"	f	class:TiXmlNode	typeref:typename:TiXmlDeclaration *
ToDeclaration	./src/lib/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return 0; } \/\/\/< Cast to a more defi/;"	f	class:TiXmlNode	typeref:typename:const TiXmlDeclaration *
ToDeclaration	./src/lib/tinyxml.h	/^	virtual const TiXmlDeclaration* ToDeclaration() const { return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlDeclaration	typeref:typename:const TiXmlDeclaration *
ToDocument	./src/lib/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()          { return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlDocument	typeref:typename:TiXmlDocument *
ToDocument	./src/lib/tinyxml.h	/^	virtual TiXmlDocument*          ToDocument()    { return 0; } \/\/\/< Cast to a more defined ty/;"	f	class:TiXmlNode	typeref:typename:TiXmlDocument *
ToDocument	./src/lib/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return 0; } \/\/\/< Cast to a more defi/;"	f	class:TiXmlNode	typeref:typename:const TiXmlDocument *
ToDocument	./src/lib/tinyxml.h	/^	virtual const TiXmlDocument*    ToDocument()    const { return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlDocument	typeref:typename:const TiXmlDocument *
ToElement	./src/lib/tinyxml.h	/^	TiXmlElement* ToElement() const		{ return ( ( node && node->ToElement() ) ? node->ToElement() :/;"	f	class:TiXmlHandle	typeref:typename:TiXmlElement *
ToElement	./src/lib/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	          { return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlElement	typeref:typename:TiXmlElement *
ToElement	./src/lib/tinyxml.h	/^	virtual TiXmlElement*           ToElement()	    { return 0; } \/\/\/< Cast to a more defined ty/;"	f	class:TiXmlNode	typeref:typename:TiXmlElement *
ToElement	./src/lib/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return 0; } \/\/\/< Cast to a more defi/;"	f	class:TiXmlNode	typeref:typename:const TiXmlElement *
ToElement	./src/lib/tinyxml.h	/^	virtual const TiXmlElement*     ToElement()     const { return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlElement	typeref:typename:const TiXmlElement *
ToLower	./src/lib/tinyxml.h	/^	inline static int ToLower( int v, TiXmlEncoding encoding )$/;"	f	class:TiXmlBase	typeref:typename:int
ToNode	./src/lib/tinyxml.h	/^	TiXmlNode* ToNode() const			{ return node; } $/;"	f	class:TiXmlHandle	typeref:typename:TiXmlNode *
ToText	./src/lib/tinyxml.h	/^	TiXmlText* ToText() const			{ return ( ( node && node->ToText() ) ? node->ToText() : 0 ); }$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlText *
ToText	./src/lib/tinyxml.h	/^	virtual TiXmlText*	            ToText()        { return 0; } \/\/\/< Cast to a more defined typ/;"	f	class:TiXmlNode	typeref:typename:TiXmlText *
ToText	./src/lib/tinyxml.h	/^	virtual TiXmlText*       ToText()       { return this; } \/\/\/< Cast to a more defined type. W/;"	f	class:TiXmlText	typeref:typename:TiXmlText *
ToText	./src/lib/tinyxml.h	/^	virtual const TiXmlText*        ToText()        const { return 0; } \/\/\/< Cast to a more defi/;"	f	class:TiXmlNode	typeref:typename:const TiXmlText *
ToText	./src/lib/tinyxml.h	/^	virtual const TiXmlText* ToText() const { return this; } \/\/\/< Cast to a more defined type. W/;"	f	class:TiXmlText	typeref:typename:const TiXmlText *
ToUnknown	./src/lib/tinyxml.h	/^	TiXmlUnknown* ToUnknown() const		{ return ( ( node && node->ToUnknown() ) ? node->ToUnknown() :/;"	f	class:TiXmlHandle	typeref:typename:TiXmlUnknown *
ToUnknown	./src/lib/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()				{ return this; } \/\/\/< Cast to a more defined /;"	f	class:TiXmlUnknown	typeref:typename:TiXmlUnknown *
ToUnknown	./src/lib/tinyxml.h	/^	virtual TiXmlUnknown*           ToUnknown()	    { return 0; } \/\/\/< Cast to a more defined ty/;"	f	class:TiXmlNode	typeref:typename:TiXmlUnknown *
ToUnknown	./src/lib/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const	{ return this; } \/\/\/< Cast to a more d/;"	f	class:TiXmlUnknown	typeref:typename:const TiXmlUnknown *
ToUnknown	./src/lib/tinyxml.h	/^	virtual const TiXmlUnknown*     ToUnknown()     const { return 0; } \/\/\/< Cast to a more defi/;"	f	class:TiXmlNode	typeref:typename:const TiXmlUnknown *
Type	./src/lib/tinyxml.h	/^	int Type() const	{ return type; }$/;"	f	class:TiXmlNode	typeref:typename:int
Unknown	./src/lib/tinyxml.h	/^	TiXmlUnknown* Unknown() const	{ return ToUnknown(); }$/;"	f	class:TiXmlHandle	typeref:typename:TiXmlUnknown *
Value	./src/lib/tinyxml.h	/^	const char *Value() const { return value.c_str (); }$/;"	f	class:TiXmlNode	typeref:typename:const char *
Value	./src/lib/tinyxml.h	/^	const char*		Value() const		{ return value.c_str(); }		\/\/\/< Return the value of this attribu/;"	f	class:TiXmlAttribute	typeref:typename:const char *
ValueStr	./src/lib/tinyxml.h	/^	const std::string& ValueStr() const	{ return value; }				\/\/\/< Return the value of this attri/;"	f	class:TiXmlAttribute	typeref:typename:const std::string &
ValueStr	./src/lib/tinyxml.h	/^	const std::string& ValueStr() const { return value; }$/;"	f	class:TiXmlNode	typeref:typename:const std::string &
ValueTStr	./src/lib/tinyxml.h	/^	const TIXML_STRING& ValueTStr() const { return value; }$/;"	f	class:TiXmlNode	typeref:typename:const TIXML_STRING &
Vector2D	./src/Vector2D.h	/^        Vector2D(float x, float y): m_x(x), m_y(y) {}$/;"	f	class:Vector2D
Vector2D	./src/Vector2D.h	/^class Vector2D$/;"	c
Version	./src/lib/tinyxml.h	/^	const char *Version() const			{ return version.c_str (); }$/;"	f	class:TiXmlDeclaration	typeref:typename:const char *
Visit	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlComment& comment )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
Visit	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlDeclaration& declaration )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
Visit	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlText& text )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
Visit	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::Visit( const TiXmlUnknown& unknown )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
Visit	./src/lib/tinyxml.h	/^	virtual bool Visit( const TiXmlComment& \/*comment*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
Visit	./src/lib/tinyxml.h	/^	virtual bool Visit( const TiXmlDeclaration& \/*declaration*\/ )	{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
Visit	./src/lib/tinyxml.h	/^	virtual bool Visit( const TiXmlText& \/*text*\/ )					{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
Visit	./src/lib/tinyxml.h	/^	virtual bool Visit( const TiXmlUnknown& \/*unknown*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
VisitEnter	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
VisitEnter	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::VisitEnter( const TiXmlElement& element, const TiXmlAttribute* firstAttribute/;"	f	class:TiXmlPrinter	typeref:typename:bool
VisitEnter	./src/lib/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
VisitEnter	./src/lib/tinyxml.h	/^	virtual bool VisitEnter( const TiXmlElement& \/*element*\/, const TiXmlAttribute* \/*firstAttri/;"	f	class:TiXmlVisitor	typeref:typename:bool
VisitExit	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlDocument& )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
VisitExit	./src/lib/tinyxml.cpp	/^bool TiXmlPrinter::VisitExit( const TiXmlElement& element )$/;"	f	class:TiXmlPrinter	typeref:typename:bool
VisitExit	./src/lib/tinyxml.h	/^	virtual bool VisitExit( const TiXmlDocument& \/*doc*\/ )			{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
VisitExit	./src/lib/tinyxml.h	/^	virtual bool VisitExit( const TiXmlElement& \/*element*\/ )		{ return true; }$/;"	f	class:TiXmlVisitor	typeref:typename:bool
__AnimatedGraphic__	./src/AnimatedGraphic.h	/^#define __AnimatedGraphic__$/;"	d
__Enemy__	./src/Enemy.h	/^#define __Enemy__$/;"	d
__GameObjectFactory__	./src/GameObjectFactory.h	/^#define __GameObjectFactory__$/;"	d
__GameObject__	./src/GameObject.h	/^#define __GameObject__$/;"	d
__GameOverState__	./src/GameOverState.h	/^#define __GameOverState__$/;"	d
__GameStateMachine__	./src/GameStateMachine.h	/^#define __GameStateMachine__$/;"	d
__GameState__	./src/GameState.h	/^#define __GameState__$/;"	d
__Game__	./src/Game.h	/^#define __Game__$/;"	d
__InputHandler__	./src/InputHandler.h	/^#define __InputHandler__$/;"	d
__LoaderParams__	./src/LoaderParams.h	/^#define __LoaderParams__$/;"	d
__MainMenuState__	./src/MainMenuState.h	/^#define __MainMenuState__$/;"	d
__MenuButton__	./src/MenuButton.h	/^#define __MenuButton__$/;"	d
__MenuState__	./src/MenuState.h	/^#define __MenuState__$/;"	d
__PauseState__	./src/PauseState.h	/^#define __PauseState__$/;"	d
__PlayState__	./src/PlayState.h	/^#define __PlayState__$/;"	d
__Player__	./src/Player.h	/^#define __Player__$/;"	d
__SDLGameObject__	./src/SDLGameObject.h	/^#define __SDLGameObject__$/;"	d
__StateParser__	./src/StateParser.h	/^#define __StateParser__$/;"	d
__TextureManager__	./src/TextureManager.h	/^#define __TextureManager__$/;"	d
__Vector2D__	./src/Vector2D.h	/^#define __Vector2D__$/;"	d
__anon5f1029ea0103	./src/lib/tinyxml.h	/^{ $/;"	g
__anon5f1029ea0203	./src/lib/tinyxml.h	/^	{$/;"	g	class:TiXmlBase
__anon5f1029ea0303	./src/lib/tinyxml.h	/^	{$/;"	g	class:TiXmlBase
append	./src/lib/tinystr.cpp	/^TiXmlString& TiXmlString::append(const char* str, size_type len)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
assign	./src/lib/tinystr.cpp	/^TiXmlString& TiXmlString::assign(const char* str, size_type len)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
at	./src/lib/tinystr.h	/^	const char& at (size_type index) const$/;"	f	class:TiXmlString	typeref:typename:const char &
attributeSet	./src/lib/tinyxml.h	/^	TiXmlAttributeSet attributeSet;$/;"	m	class:TiXmlElement	typeref:typename:TiXmlAttributeSet
buffer	./src/lib/tinyxml.h	/^	TIXML_STRING buffer;$/;"	m	class:TiXmlPrinter	typeref:typename:TIXML_STRING
button_state	./src/MenuButton.h	/^        enum button_state$/;"	g	class:MenuButton
c_str	./src/lib/tinystr.h	/^	const char * c_str () const { return rep_->str; }$/;"	f	class:TiXmlString	typeref:typename:const char *
capacity	./src/lib/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	typeref:typename:size_type
capacity	./src/lib/tinystr.h	/^	size_type capacity () const { return rep_->capacity; }$/;"	f	class:TiXmlString	typeref:typename:size_type
cdata	./src/lib/tinyxml.h	/^	bool cdata;			\/\/ true if this should be input and output as a CDATA style text element$/;"	m	class:TiXmlText	typeref:typename:bool
changeState	./src/GameStateMachine.cpp	/^void GameStateMachine::changeState(GameState* pState)$/;"	f	class:GameStateMachine	typeref:typename:void
changeStateFlag	./src/GameStateMachine.h	/^        bool changeStateFlag;$/;"	m	class:GameStateMachine	typeref:typename:bool
changeStatePrivate	./src/GameStateMachine.cpp	/^void GameStateMachine::changeStatePrivate(GameState* pState)$/;"	f	class:GameStateMachine	typeref:typename:void
checkCollision	./src/PlayState.cpp	/^bool PlayState::checkCollision(SDLGameObject* p1, SDLGameObject* p2)$/;"	f	class:PlayState	typeref:typename:bool
chr	./src/lib/tinyxml.h	/^		char		    chr;$/;"	m	struct:TiXmlBase::Entity	typeref:typename:char
clean	./src/AnimatedGraphic.cpp	/^void AnimatedGraphic::clean()$/;"	f	class:AnimatedGraphic	typeref:typename:void
clean	./src/Enemy.cpp	/^void Enemy::clean() { }$/;"	f	class:Enemy	typeref:typename:void
clean	./src/Game.cpp	/^void Game::clean()$/;"	f	class:Game	typeref:typename:void
clean	./src/InputHandler.cpp	/^void InputHandler::clean()$/;"	f	class:InputHandler	typeref:typename:void
clean	./src/MenuButton.cpp	/^void MenuButton::clean()$/;"	f	class:MenuButton	typeref:typename:void
clean	./src/Player.cpp	/^void Player::clean() { }$/;"	f	class:Player	typeref:typename:void
clean	./src/SDLGameObject.h	/^        virtual void clean() {};$/;"	f	class:SDLGameObject	typeref:typename:void
clear	./src/lib/tinystr.h	/^	void clear ()$/;"	f	class:TiXmlString	typeref:typename:void
clearFromTextureMap	./src/TextureManager.cpp	/^void TextureManager::clearFromTextureMap(std::string id)$/;"	f	class:TextureManager	typeref:typename:void
col	./src/lib/tinyxml.h	/^	int col;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	typeref:typename:int
condenseWhiteSpace	./src/lib/tinyxml.cpp	/^bool TiXmlBase::condenseWhiteSpace = true;$/;"	m	class:TiXmlBase	typeref:typename:bool
condenseWhiteSpace	./src/lib/tinyxml.h	/^	static bool condenseWhiteSpace;$/;"	m	class:TiXmlBase	typeref:typename:bool
create	./src/GameObjectFactory.h	/^        GameObject* create(std::string typeID)$/;"	f	class:GameObjectFactory	typeref:typename:GameObject *
createGameObject	./src/AnimatedGraphic.h	/^        GameObject* createGameObject() const$/;"	f	class:AnimatedGraphicCreator	typeref:typename:GameObject *
createGameObject	./src/Enemy.h	/^    GameObject* createGameObject() const$/;"	f	class:EnemyCreator	typeref:typename:GameObject *
createGameObject	./src/MenuButton.h	/^    GameObject* createGameObject() const$/;"	f	class:MenuButtonCreator	typeref:typename:GameObject *
createGameObject	./src/Player.h	/^        GameObject* createGameObject() const$/;"	f	class:PlayerCreator	typeref:typename:GameObject *
cursor	./src/lib/tinyxmlparser.cpp	/^	TiXmlCursor		cursor;$/;"	m	class:TiXmlParsingData	typeref:typename:TiXmlCursor	file:
data	./src/lib/tinystr.h	/^	const char * data () const { return rep_->str; }$/;"	f	class:TiXmlString	typeref:typename:const char *
depth	./src/lib/tinyxml.h	/^	int depth;$/;"	m	class:TiXmlPrinter	typeref:typename:int
document	./src/lib/tinyxml.h	/^	TiXmlDocument*	document;	\/\/ A pointer back to a document, for error reporting.$/;"	m	class:TiXmlAttribute	typeref:typename:TiXmlDocument *
draw	./src/AnimatedGraphic.cpp	/^void AnimatedGraphic::draw()$/;"	f	class:AnimatedGraphic	typeref:typename:void
draw	./src/Enemy.cpp	/^void Enemy::draw()$/;"	f	class:Enemy	typeref:typename:void
draw	./src/MenuButton.cpp	/^void MenuButton::draw()$/;"	f	class:MenuButton	typeref:typename:void
draw	./src/Player.cpp	/^void Player::draw()$/;"	f	class:Player	typeref:typename:void
draw	./src/SDLGameObject.cpp	/^void SDLGameObject::draw()$/;"	f	class:SDLGameObject	typeref:typename:void
draw	./src/TextureManager.cpp	/^void TextureManager::draw(std::string id, int x, int y, int width, int height, SDL_Renderer* pRe/;"	f	class:TextureManager	typeref:typename:void
drawFrame	./src/TextureManager.cpp	/^void TextureManager::drawFrame(std::string id, int x, int y, int width, int height, int currentR/;"	f	class:TextureManager	typeref:typename:void
empty	./src/lib/tinystr.h	/^	bool empty () const { return rep_->size == 0; }$/;"	f	class:TiXmlString	typeref:typename:bool
encoding	./src/lib/tinyxml.h	/^	TIXML_STRING encoding;$/;"	m	class:TiXmlDeclaration	typeref:typename:TIXML_STRING
entity	./src/lib/tinyxml.h	/^	static Entity entity[ NUM_ENTITY ];$/;"	m	class:TiXmlBase	typeref:typename:Entity[]
entity	./src/lib/tinyxmlparser.cpp	/^TiXmlBase::Entity TiXmlBase::entity[ TiXmlBase::NUM_ENTITY ] = $/;"	m	class:TiXmlBase	typeref:typename:TiXmlBase::Entity[]
error	./src/lib/tinyxml.h	/^	bool error;$/;"	m	class:TiXmlDocument	typeref:typename:bool
errorDesc	./src/lib/tinyxml.h	/^	TIXML_STRING errorDesc;$/;"	m	class:TiXmlDocument	typeref:typename:TIXML_STRING
errorId	./src/lib/tinyxml.h	/^	int  errorId;$/;"	m	class:TiXmlDocument	typeref:typename:int
errorLocation	./src/lib/tinyxml.h	/^	TiXmlCursor errorLocation;$/;"	m	class:TiXmlDocument	typeref:typename:TiXmlCursor
errorString	./src/lib/tinyxml.h	/^	static const char* errorString[ TIXML_ERROR_STRING_COUNT ];$/;"	m	class:TiXmlBase	typeref:typename:const char * []
errorString	./src/lib/tinyxmlerror.cpp	/^const char* TiXmlBase::errorString[ TiXmlBase::TIXML_ERROR_STRING_COUNT ] =$/;"	m	class:TiXmlBase	typeref:typename:const char * []
find	./src/lib/tinystr.h	/^	size_type find (char lookup) const$/;"	f	class:TiXmlString	typeref:typename:size_type
find	./src/lib/tinystr.h	/^	size_type find (char tofind, size_type offset) const$/;"	f	class:TiXmlString	typeref:typename:size_type
finish	./src/lib/tinystr.h	/^	char* finish() const { return rep_->str + rep_->size; }$/;"	f	class:TiXmlString	typeref:typename:char *
firstChild	./src/lib/tinyxml.h	/^	TiXmlNode*		firstChild;$/;"	m	class:TiXmlNode	typeref:typename:TiXmlNode *
getAnimSpeed	./src/LoaderParams.h	/^        int getAnimSpeed() const { return m_animSpeed; }$/;"	f	class:LoaderParams	typeref:typename:int
getButtonState	./src/InputHandler.h	/^        bool getButtonState(int joy, int buttonNumber)$/;"	f	class:InputHandler	typeref:typename:bool
getCallbackID	./src/LoaderParams.h	/^        int getCallbackID() const { return m_callbackID; }$/;"	f	class:LoaderParams	typeref:typename:int
getCallbackID	./src/MenuButton.h	/^        int getCallbackID() { return m_callbackID; }$/;"	f	class:MenuButton	typeref:typename:int
getHeight	./src/LoaderParams.h	/^        int getHeight() const { return m_height; }$/;"	f	class:LoaderParams	typeref:typename:int
getHeight	./src/SDLGameObject.h	/^        int getHeight() { return m_height; }$/;"	f	class:SDLGameObject	typeref:typename:int
getMouseButtonState	./src/InputHandler.h	/^        bool getMouseButtonState(int buttonNumber)$/;"	f	class:InputHandler	typeref:typename:bool
getMousePosition	./src/InputHandler.h	/^        Vector2D* getMousePosition()$/;"	f	class:InputHandler	typeref:typename:Vector2D *
getNumFrames	./src/LoaderParams.h	/^        int getNumFrames() const { return m_numFrames; }$/;"	f	class:LoaderParams	typeref:typename:int
getPosition	./src/SDLGameObject.h	/^        Vector2D& getPosition() { return m_position; }$/;"	f	class:SDLGameObject	typeref:typename:Vector2D &
getRenderer	./src/Game.h	/^        SDL_Renderer* getRenderer() const { return m_pRenderer; }$/;"	f	class:Game	typeref:typename:SDL_Renderer *
getStateID	./src/GameOverState.h	/^	virtual std::string getStateID() const { return s_gameOverID; }$/;"	f	class:GameOverState	typeref:typename:std::string
getStateID	./src/MainMenuState.h	/^        virtual std::string getStateID() const { return s_menuID; }$/;"	f	class:MainMenuState	typeref:typename:std::string
getStateID	./src/PauseState.h	/^        virtual std::string getStateID() const { return s_pauseID; }$/;"	f	class:PauseState	typeref:typename:std::string
getStateID	./src/PlayState.h	/^        virtual std::string getStateID() const { return s_playID; }$/;"	f	class:PlayState	typeref:typename:std::string
getStateMachine	./src/Game.h	/^        GameStateMachine* getStateMachine() { return m_pGameStateMachine; }$/;"	f	class:Game	typeref:typename:GameStateMachine *
getTextureID	./src/LoaderParams.h	/^        std::string getTextureID() const { return m_textureID; }$/;"	f	class:LoaderParams	typeref:typename:std::string
getWidth	./src/LoaderParams.h	/^        int getWidth() const { return m_width; }$/;"	f	class:LoaderParams	typeref:typename:int
getWidth	./src/SDLGameObject.h	/^        int getWidth() { return m_width; }$/;"	f	class:SDLGameObject	typeref:typename:int
getX	./src/LoaderParams.h	/^        int getX() const { return m_x; }$/;"	f	class:LoaderParams	typeref:typename:int
getX	./src/Vector2D.h	/^        float getX() { return m_x; }$/;"	f	class:Vector2D	typeref:typename:float
getY	./src/LoaderParams.h	/^        int getY() const { return m_y; }$/;"	f	class:LoaderParams	typeref:typename:int
getY	./src/Vector2D.h	/^        float getY() { return m_y; }$/;"	f	class:Vector2D	typeref:typename:float
handleEvents	./src/Game.cpp	/^void Game::handleEvents()$/;"	f	class:Game	typeref:typename:void
handleInput	./src/Player.cpp	/^void Player::handleInput()$/;"	f	class:Player	typeref:typename:void
indent	./src/lib/tinyxml.h	/^	TIXML_STRING indent;$/;"	m	class:TiXmlPrinter	typeref:typename:TIXML_STRING
init	./src/Game.cpp	/^bool Game::init(const char* title, int x_pos, int y_pos, int width, int height, bool fullscreen)$/;"	f	class:Game	typeref:typename:bool
init	./src/lib/tinystr.h	/^	void init(size_type sz) { init(sz, sz); }$/;"	f	class:TiXmlString	typeref:typename:void
init	./src/lib/tinystr.h	/^	void init(size_type sz, size_type cap)$/;"	f	class:TiXmlString	typeref:typename:void
initialiseJoysticks	./src/InputHandler.cpp	/^void InputHandler::initialiseJoysticks()$/;"	f	class:InputHandler	typeref:typename:void
isKeyDown	./src/InputHandler.cpp	/^bool InputHandler::isKeyDown(SDL_Scancode key)$/;"	f	class:InputHandler	typeref:typename:bool
joysticksInitialised	./src/InputHandler.h	/^        bool joysticksInitialised() { return m_bJoysticksInitialised; }$/;"	f	class:InputHandler	typeref:typename:bool
lastChild	./src/lib/tinyxml.h	/^	TiXmlNode*		lastChild;$/;"	m	class:TiXmlNode	typeref:typename:TiXmlNode *
length	./src/Vector2D.h	/^        float length() { return sqrt(m_x * m_x + m_y * m_y); }$/;"	f	class:Vector2D	typeref:typename:float
length	./src/lib/tinystr.h	/^	size_type length () const { return rep_->size; }$/;"	f	class:TiXmlString	typeref:typename:size_type
lineBreak	./src/lib/tinyxml.h	/^	TIXML_STRING lineBreak;$/;"	m	class:TiXmlPrinter	typeref:typename:TIXML_STRING
load	./src/AnimatedGraphic.cpp	/^void AnimatedGraphic::load(const LoaderParams* pParams)$/;"	f	class:AnimatedGraphic	typeref:typename:void
load	./src/Enemy.cpp	/^void Enemy::load(const LoaderParams *pParams)$/;"	f	class:Enemy	typeref:typename:void
load	./src/MenuButton.cpp	/^void MenuButton::load(const LoaderParams *pParams)$/;"	f	class:MenuButton	typeref:typename:void
load	./src/Player.cpp	/^void Player::load(const LoaderParams *pParams)$/;"	f	class:Player	typeref:typename:void
load	./src/SDLGameObject.cpp	/^void SDLGameObject::load(const LoaderParams *pParams)$/;"	f	class:SDLGameObject	typeref:typename:void
load	./src/TextureManager.cpp	/^bool TextureManager::load(std::string fileName,std::string id, $/;"	f	class:TextureManager	typeref:typename:bool
location	./src/lib/tinyxml.h	/^	TiXmlCursor location;$/;"	m	class:TiXmlBase	typeref:typename:TiXmlCursor
m_acceleration	./src/SDLGameObject.h	/^        Vector2D m_acceleration;$/;"	m	class:SDLGameObject	typeref:typename:Vector2D
m_animSpeed	./src/AnimatedGraphic.h	/^        int m_animSpeed;$/;"	m	class:AnimatedGraphic	typeref:typename:int
m_animSpeed	./src/LoaderParams.h	/^        int m_animSpeed;$/;"	m	class:LoaderParams	typeref:typename:int
m_bJoysticksInitialised	./src/InputHandler.h	/^        bool m_bJoysticksInitialised;$/;"	m	class:InputHandler	typeref:typename:bool
m_bReleased	./src/MenuButton.h	/^        bool m_bReleased;$/;"	m	class:MenuButton	typeref:typename:bool
m_bRunning	./src/Game.h	/^        bool m_bRunning;$/;"	m	class:Game	typeref:typename:bool
m_buttonStates	./src/InputHandler.h	/^        std::vector<std::vector<bool>> m_buttonStates;$/;"	m	class:InputHandler	typeref:typename:std::vector<std::vector<bool>>
m_callback	./src/MenuButton.h	/^        void(*m_callback)();$/;"	m	class:MenuButton	typeref:typename:void (*)()
m_callbackID	./src/LoaderParams.h	/^        int m_callbackID;$/;"	m	class:LoaderParams	typeref:typename:int
m_callbackID	./src/MenuButton.h	/^        int m_callbackID;$/;"	m	class:MenuButton	typeref:typename:int
m_callbacks	./src/MenuState.h	/^        std::vector<Callback> m_callbacks;$/;"	m	class:MenuState	typeref:typename:std::vector<Callback>
m_creators	./src/GameObjectFactory.h	/^        std::map<std::string, BaseCreator*> m_creators;$/;"	m	class:GameObjectFactory	typeref:typename:std::map<std::string,BaseCreator * >
m_currentFrame	./src/Game.h	/^        int m_currentFrame;$/;"	m	class:Game	typeref:typename:int
m_currentFrame	./src/SDLGameObject.h	/^        int m_currentFrame;$/;"	m	class:SDLGameObject	typeref:typename:int
m_currentRow	./src/SDLGameObject.h	/^        int m_currentRow;$/;"	m	class:SDLGameObject	typeref:typename:int
m_gameObjects	./src/GameOverState.h	/^	std::vector<GameObject*> m_gameObjects;$/;"	m	class:GameOverState	typeref:typename:std::vector<GameObject * >
m_gameObjects	./src/MainMenuState.h	/^        std::vector<GameObject*> m_gameObjects;$/;"	m	class:MainMenuState	typeref:typename:std::vector<GameObject * >
m_gameObjects	./src/PauseState.h	/^        std::vector<GameObject*> m_gameObjects;$/;"	m	class:PauseState	typeref:typename:std::vector<GameObject * >
m_gameObjects	./src/PlayState.h	/^        std::vector<GameObject*> m_gameObjects;$/;"	m	class:PlayState	typeref:typename:std::vector<GameObject * >
m_gameStates	./src/GameStateMachine.h	/^        std::vector<GameState*> m_gameStates;$/;"	m	class:GameStateMachine	typeref:typename:std::vector<GameState * >
m_height	./src/LoaderParams.h	/^        int m_height;$/;"	m	class:LoaderParams	typeref:typename:int
m_height	./src/SDLGameObject.h	/^        int m_height;$/;"	m	class:SDLGameObject	typeref:typename:int
m_joystickDeadZone	./src/InputHandler.h	/^        const int m_joystickDeadZone = 10000;$/;"	m	class:InputHandler	typeref:typename:const int
m_joystickValues	./src/InputHandler.h	/^        std::vector<std::pair<Vector2D*, Vector2D*>> m_joystickValues;$/;"	m	class:InputHandler	typeref:typename:std::vector<std::pair<Vector2D *,Vector2D * >>
m_joysticks	./src/InputHandler.h	/^        std::vector<SDL_Joystick*> m_joysticks;$/;"	m	class:InputHandler	typeref:typename:std::vector<SDL_Joystick * >
m_keystates	./src/InputHandler.h	/^        const Uint8* m_keystates;$/;"	m	class:InputHandler	typeref:typename:const Uint8 *
m_mouseButtonStates	./src/InputHandler.h	/^        std::vector<bool> m_mouseButtonStates;$/;"	m	class:InputHandler	typeref:typename:std::vector<bool>
m_mousePosition	./src/InputHandler.h	/^        Vector2D* m_mousePosition;$/;"	m	class:InputHandler	typeref:typename:Vector2D *
m_numFrames	./src/LoaderParams.h	/^        int m_numFrames;$/;"	m	class:LoaderParams	typeref:typename:int
m_pGameStateMachine	./src/Game.h	/^        GameStateMachine* m_pGameStateMachine;$/;"	m	class:Game	typeref:typename:GameStateMachine *
m_pRenderer	./src/Game.h	/^        SDL_Renderer* m_pRenderer;$/;"	m	class:Game	typeref:typename:SDL_Renderer *
m_pWindow	./src/Game.h	/^        SDL_Window* m_pWindow;$/;"	m	class:Game	typeref:typename:SDL_Window *
m_position	./src/SDLGameObject.h	/^        Vector2D m_position;$/;"	m	class:SDLGameObject	typeref:typename:Vector2D
m_textureID	./src/LoaderParams.h	/^        std::string m_textureID;$/;"	m	class:LoaderParams	typeref:typename:std::string
m_textureID	./src/SDLGameObject.h	/^        std::string m_textureID;$/;"	m	class:SDLGameObject	typeref:typename:std::string
m_textureIDList	./src/GameState.h	/^        std::vector<std::string> m_textureIDList;$/;"	m	class:GameState	typeref:typename:std::vector<std::string>
m_textureMap	./src/TextureManager.h	/^        std::map<std::string, SDL_Texture*> m_textureMap;$/;"	m	class:TextureManager	typeref:typename:std::map<std::string,SDL_Texture * >
m_velocity	./src/SDLGameObject.h	/^        Vector2D m_velocity;$/;"	m	class:SDLGameObject	typeref:typename:Vector2D
m_width	./src/LoaderParams.h	/^        int m_width;$/;"	m	class:LoaderParams	typeref:typename:int
m_width	./src/SDLGameObject.h	/^        int m_width;$/;"	m	class:SDLGameObject	typeref:typename:int
m_x	./src/LoaderParams.h	/^        int m_x;$/;"	m	class:LoaderParams	typeref:typename:int
m_x	./src/Vector2D.h	/^        float m_x;$/;"	m	class:Vector2D	typeref:typename:float
m_y	./src/LoaderParams.h	/^        int m_y;$/;"	m	class:LoaderParams	typeref:typename:int
m_y	./src/Vector2D.h	/^        float m_y;$/;"	m	class:Vector2D	typeref:typename:float
main	./src/main.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
mouse_buttons	./src/InputHandler.h	/^enum mouse_buttons$/;"	g
name	./src/lib/tinyxml.h	/^	TIXML_STRING name;$/;"	m	class:TiXmlAttribute	typeref:typename:TIXML_STRING
newState	./src/GameStateMachine.h	/^        GameState* newState;$/;"	m	class:GameStateMachine	typeref:typename:GameState *
next	./src/lib/tinyxml.h	/^	TiXmlAttribute*	next;$/;"	m	class:TiXmlAttribute	typeref:typename:TiXmlAttribute *
next	./src/lib/tinyxml.h	/^	TiXmlNode*		next;$/;"	m	class:TiXmlNode	typeref:typename:TiXmlNode *
node	./src/lib/tinyxml.h	/^	TiXmlNode* node;$/;"	m	class:TiXmlHandle	typeref:typename:TiXmlNode *
normalize	./src/Vector2D.h	/^        void normalize()$/;"	f	class:Vector2D	typeref:typename:void
npos	./src/lib/tinystr.cpp	/^const TiXmlString::size_type TiXmlString::npos = static_cast< TiXmlString::size_type >(-1);$/;"	m	class:TiXmlString	typeref:typename:const TiXmlString::size_type
npos	./src/lib/tinystr.h	/^	static const size_type npos; \/\/ = -1;$/;"	m	class:TiXmlString	typeref:typename:const size_type
nullrep_	./src/lib/tinystr.cpp	/^TiXmlString::Rep TiXmlString::nullrep_ = { 0, 0, { '\\0' } };$/;"	m	class:TiXmlString	typeref:typename:TiXmlString::Rep
nullrep_	./src/lib/tinystr.h	/^	static Rep nullrep_;$/;"	m	class:TiXmlString	typeref:typename:Rep
onEnter	./src/GameOverState.cpp	/^bool GameOverState::onEnter()$/;"	f	class:GameOverState	typeref:typename:bool
onEnter	./src/MainMenuState.cpp	/^bool MainMenuState::onEnter()$/;"	f	class:MainMenuState	typeref:typename:bool
onEnter	./src/PauseState.cpp	/^bool PauseState::onEnter()$/;"	f	class:PauseState	typeref:typename:bool
onEnter	./src/PlayState.cpp	/^bool PlayState::onEnter()$/;"	f	class:PlayState	typeref:typename:bool
onExit	./src/GameOverState.cpp	/^bool GameOverState::onExit()$/;"	f	class:GameOverState	typeref:typename:bool
onExit	./src/MainMenuState.cpp	/^bool MainMenuState::onExit()$/;"	f	class:MainMenuState	typeref:typename:bool
onExit	./src/PauseState.cpp	/^bool PauseState::onExit()$/;"	f	class:PauseState	typeref:typename:bool
onExit	./src/PlayState.cpp	/^bool PlayState::onExit()$/;"	f	class:PlayState	typeref:typename:bool
onJoystickAxisMove	./src/InputHandler.cpp	/^void InputHandler::onJoystickAxisMove(SDL_Event& event) $/;"	f	class:InputHandler	typeref:typename:void
onJoystickButtonDown	./src/InputHandler.cpp	/^void InputHandler::onJoystickButtonDown(SDL_Event& event) $/;"	f	class:InputHandler	typeref:typename:void
onJoystickButtonUp	./src/InputHandler.cpp	/^void InputHandler::onJoystickButtonUp(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
onKeyDown	./src/InputHandler.cpp	/^void InputHandler::onKeyDown()$/;"	f	class:InputHandler	typeref:typename:void
onKeyUp	./src/InputHandler.cpp	/^void InputHandler::onKeyUp()$/;"	f	class:InputHandler	typeref:typename:void
onMouseButtonDown	./src/InputHandler.cpp	/^void InputHandler::onMouseButtonDown(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
onMouseButtonUp	./src/InputHandler.cpp	/^void InputHandler::onMouseButtonUp(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
onMouseMove	./src/InputHandler.cpp	/^void InputHandler::onMouseMove(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
operator !=	./src/lib/tinystr.h	/^inline bool operator != (const TiXmlString & a, const TiXmlString & b) { return !(a == b); }$/;"	f	typeref:typename:bool
operator !=	./src/lib/tinystr.h	/^inline bool operator != (const TiXmlString & a, const char* b) { return !(a == b); }$/;"	f	typeref:typename:bool
operator !=	./src/lib/tinystr.h	/^inline bool operator != (const char* a, const TiXmlString & b) { return !(b == a); }$/;"	f	typeref:typename:bool
operator *	./src/Vector2D.h	/^        Vector2D operator*(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator *=	./src/Vector2D.h	/^        Vector2D& operator*=(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator +	./src/Vector2D.h	/^        Vector2D operator+(const Vector2D& v2) const$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator +	./src/lib/tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const TiXmlString & b)$/;"	f	typeref:typename:TiXmlString
operator +	./src/lib/tinystr.cpp	/^TiXmlString operator + (const TiXmlString & a, const char* b)$/;"	f	typeref:typename:TiXmlString
operator +	./src/lib/tinystr.cpp	/^TiXmlString operator + (const char* a, const TiXmlString & b)$/;"	f	typeref:typename:TiXmlString
operator +=	./src/Vector2D.h	/^        Vector2D& operator+=(const Vector2D& v2)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator +=	./src/lib/tinystr.h	/^	TiXmlString& operator += (char single)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
operator +=	./src/lib/tinystr.h	/^	TiXmlString& operator += (const TiXmlString & suffix)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
operator +=	./src/lib/tinystr.h	/^	TiXmlString& operator += (const char * suffix)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
operator -	./src/Vector2D.h	/^        Vector2D operator-(const Vector2D& v2) const$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator -=	./src/Vector2D.h	/^        Vector2D& operator-=(const Vector2D& v2)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator /	./src/Vector2D.h	/^        Vector2D operator\/(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator /=	./src/Vector2D.h	/^        Vector2D& operator\/=(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator <	./src/lib/tinystr.h	/^inline bool operator < (const TiXmlString & a, const TiXmlString & b)$/;"	f	typeref:typename:bool
operator <	./src/lib/tinyxml.h	/^	bool operator<( const TiXmlAttribute& rhs )	 const { return name < rhs.name; }$/;"	f	class:TiXmlAttribute	typeref:typename:bool
operator <<	./src/lib/tinystr.h	/^	TiXmlOutStream & operator << (const TiXmlString & in)$/;"	f	class:TiXmlOutStream	typeref:typename:TiXmlOutStream &
operator <<	./src/lib/tinystr.h	/^	TiXmlOutStream & operator << (const char * in)$/;"	f	class:TiXmlOutStream	typeref:typename:TiXmlOutStream &
operator <<	./src/lib/tinyxml.cpp	/^std::ostream& operator<< (std::ostream & out, const TiXmlNode & base)$/;"	f	typeref:typename:std::ostream &
operator <<	./src/lib/tinyxml.cpp	/^std::string& operator<< (std::string& out, const TiXmlNode& base )$/;"	f	typeref:typename:std::string &
operator <=	./src/lib/tinystr.h	/^inline bool operator <= (const TiXmlString & a, const TiXmlString & b) { return !(b < a); }$/;"	f	typeref:typename:bool
operator =	./src/lib/tinystr.h	/^	TiXmlString& operator = (const TiXmlString & copy)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
operator =	./src/lib/tinystr.h	/^	TiXmlString& operator = (const char * copy)$/;"	f	class:TiXmlString	typeref:typename:TiXmlString &
operator =	./src/lib/tinyxml.cpp	/^TiXmlComment& TiXmlComment::operator=( const TiXmlComment& base )$/;"	f	class:TiXmlComment	typeref:typename:TiXmlComment &
operator =	./src/lib/tinyxml.cpp	/^TiXmlDeclaration& TiXmlDeclaration::operator=( const TiXmlDeclaration& copy )$/;"	f	class:TiXmlDeclaration	typeref:typename:TiXmlDeclaration &
operator =	./src/lib/tinyxml.cpp	/^TiXmlDocument& TiXmlDocument::operator=( const TiXmlDocument& copy )$/;"	f	class:TiXmlDocument	typeref:typename:TiXmlDocument &
operator =	./src/lib/tinyxml.cpp	/^TiXmlElement& TiXmlElement::operator=( const TiXmlElement& base )$/;"	f	class:TiXmlElement	typeref:typename:TiXmlElement &
operator =	./src/lib/tinyxml.h	/^	TiXmlHandle operator=( const TiXmlHandle& ref ) { if ( &ref != this ) this->node = ref.node; re/;"	f	class:TiXmlHandle	typeref:typename:TiXmlHandle
operator =	./src/lib/tinyxml.h	/^	TiXmlText& operator=( const TiXmlText& base )							 	{ base.CopyTo( this ); return *this; }$/;"	f	class:TiXmlText	typeref:typename:TiXmlText &
operator =	./src/lib/tinyxml.h	/^	TiXmlUnknown& operator=( const TiXmlUnknown& copy )										{ copy.CopyTo( this ); return *thi/;"	f	class:TiXmlUnknown	typeref:typename:TiXmlUnknown &
operator ==	./src/lib/tinystr.h	/^inline bool operator == (const TiXmlString & a, const TiXmlString & b)$/;"	f	typeref:typename:bool
operator ==	./src/lib/tinystr.h	/^inline bool operator == (const TiXmlString & a, const char* b) { return strcmp(a.c_str(), b) == /;"	f	typeref:typename:bool
operator ==	./src/lib/tinystr.h	/^inline bool operator == (const char* a, const TiXmlString & b) { return b == a; }$/;"	f	typeref:typename:bool
operator ==	./src/lib/tinyxml.h	/^	bool operator==( const TiXmlAttribute& rhs ) const { return rhs.name == name; }$/;"	f	class:TiXmlAttribute	typeref:typename:bool
operator >	./src/lib/tinystr.h	/^inline bool operator >  (const TiXmlString & a, const TiXmlString & b) { return b < a; }$/;"	f	typeref:typename:bool
operator >	./src/lib/tinyxml.h	/^	bool operator>( const TiXmlAttribute& rhs )  const { return name > rhs.name; }$/;"	f	class:TiXmlAttribute	typeref:typename:bool
operator >=	./src/lib/tinystr.h	/^inline bool operator >= (const TiXmlString & a, const TiXmlString & b) { return !(a < b); }$/;"	f	typeref:typename:bool
operator >>	./src/lib/tinyxml.cpp	/^std::istream& operator>> (std::istream & in, TiXmlNode & base)$/;"	f	typeref:typename:std::istream &
operator [] 	./src/lib/tinystr.h	/^	char& operator [] (size_type index) const$/;"	f	class:TiXmlString	typeref:typename:char &
pInstance	./src/GameObjectFactory.cpp	/^GameObjectFactory* GameObjectFactory::pInstance = 0;$/;"	m	class:GameObjectFactory	typeref:typename:GameObjectFactory *
pInstance	./src/GameObjectFactory.h	/^        static GameObjectFactory* pInstance;$/;"	m	class:GameObjectFactory	typeref:typename:GameObjectFactory *
parent	./src/lib/tinyxml.h	/^	TiXmlNode*		parent;$/;"	m	class:TiXmlNode	typeref:typename:TiXmlNode *
parseObjects	./src/StateParser.cpp	/^void StateParser::parseObjects(TiXmlElement *pStateRoot, std::vector<GameObject *> *pObjects)$/;"	f	class:StateParser	typeref:typename:void
parseState	./src/StateParser.cpp	/^bool StateParser::parseState(const char* stateFile, std::string stateID, std::vector<GameObject /;"	f	class:StateParser	typeref:typename:bool
parseTextures	./src/StateParser.cpp	/^void StateParser::parseTextures(TiXmlElement* pStateRoot, std::vector<std::string> *pTextureIDs)$/;"	f	class:StateParser	typeref:typename:void
popState	./src/GameStateMachine.cpp	/^void GameStateMachine::popState()$/;"	f	class:GameStateMachine	typeref:typename:void
popStateFlag	./src/GameStateMachine.h	/^        bool popStateFlag;$/;"	m	class:GameStateMachine	typeref:typename:bool
popStatePrivate	./src/GameStateMachine.cpp	/^void GameStateMachine::popStatePrivate()$/;"	f	class:GameStateMachine	typeref:typename:void
prev	./src/lib/tinyxml.h	/^	TiXmlAttribute*	prev;$/;"	m	class:TiXmlAttribute	typeref:typename:TiXmlAttribute *
prev	./src/lib/tinyxml.h	/^	TiXmlNode*		prev;$/;"	m	class:TiXmlNode	typeref:typename:TiXmlNode *
pushState	./src/GameStateMachine.cpp	/^void GameStateMachine::pushState(GameState *pState)$/;"	f	class:GameStateMachine	typeref:typename:void
quit	./src/Game.h	/^	    void quit() { m_bRunning = false; }$/;"	f	class:Game	typeref:typename:void
quit	./src/lib/tinystr.h	/^	void quit()$/;"	f	class:TiXmlString	typeref:typename:void
registerType	./src/GameObjectFactory.h	/^        bool registerType(std::string typeID, BaseCreator* pCreator)$/;"	f	class:GameObjectFactory	typeref:typename:bool
render	./src/Game.cpp	/^void Game::render()$/;"	f	class:Game	typeref:typename:void
render	./src/GameOverState.cpp	/^void GameOverState::render()$/;"	f	class:GameOverState	typeref:typename:void
render	./src/GameStateMachine.cpp	/^void GameStateMachine::render()$/;"	f	class:GameStateMachine	typeref:typename:void
render	./src/MainMenuState.cpp	/^void MainMenuState::render()$/;"	f	class:MainMenuState	typeref:typename:void
render	./src/PauseState.cpp	/^void PauseState::render()$/;"	f	class:PauseState	typeref:typename:void
render	./src/PlayState.cpp	/^void PlayState::render()$/;"	f	class:PlayState	typeref:typename:void
rep_	./src/lib/tinystr.h	/^	Rep * rep_;$/;"	m	class:TiXmlString	typeref:typename:Rep *
reserve	./src/lib/tinystr.cpp	/^void TiXmlString::reserve (size_type cap)$/;"	f	class:TiXmlString	typeref:typename:void
reset	./src/InputHandler.cpp	/^void InputHandler::reset()$/;"	f	class:InputHandler	typeref:typename:void
row	./src/lib/tinyxml.h	/^	int row;	\/\/ 0 based.$/;"	m	struct:TiXmlCursor	typeref:typename:int
running	./src/Game.h	/^        bool running() { return m_bRunning; }$/;"	f	class:Game	typeref:typename:bool
s_exitFromMenu	./src/MainMenuState.cpp	/^void MainMenuState::s_exitFromMenu()$/;"	f	class:MainMenuState	typeref:typename:void
s_gameOverID	./src/GameOverState.cpp	/^const std::string GameOverState::s_gameOverID = "GAMEOVER";$/;"	m	class:GameOverState	typeref:typename:const std::string
s_gameOverID	./src/GameOverState.h	/^	static const std::string s_gameOverID;$/;"	m	class:GameOverState	typeref:typename:const std::string
s_gameOverToMain	./src/GameOverState.cpp	/^void GameOverState::s_gameOverToMain()$/;"	f	class:GameOverState	typeref:typename:void
s_menuID	./src/MainMenuState.cpp	/^const std::string MainMenuState::s_menuID = "MENU";$/;"	m	class:MainMenuState	typeref:typename:const std::string
s_menuID	./src/MainMenuState.h	/^        static const std::string s_menuID;$/;"	m	class:MainMenuState	typeref:typename:const std::string
s_menuToPlay	./src/MainMenuState.cpp	/^void MainMenuState::s_menuToPlay()$/;"	f	class:MainMenuState	typeref:typename:void
s_pInstance	./src/Game.cpp	/^Game* Game::s_pInstance = 0;$/;"	m	class:Game	typeref:typename:Game *
s_pInstance	./src/Game.h	/^        static Game* s_pInstance;$/;"	m	class:Game	typeref:typename:Game *
s_pInstance	./src/InputHandler.cpp	/^InputHandler* InputHandler::s_pInstance = 0;$/;"	m	class:InputHandler	typeref:typename:InputHandler *
s_pInstance	./src/InputHandler.h	/^        static InputHandler* s_pInstance;$/;"	m	class:InputHandler	typeref:typename:InputHandler *
s_pInstance	./src/TextureManager.cpp	/^TextureManager* TextureManager::s_pInstance = 0;$/;"	m	class:TextureManager	typeref:typename:TextureManager *
s_pInstance	./src/TextureManager.h	/^        static TextureManager* s_pInstance;$/;"	m	class:TextureManager	typeref:typename:TextureManager *
s_pauseID	./src/PauseState.cpp	/^const std::string PauseState::s_pauseID = "PAUSE";$/;"	m	class:PauseState	typeref:typename:const std::string
s_pauseID	./src/PauseState.h	/^        static const std::string s_pauseID;$/;"	m	class:PauseState	typeref:typename:const std::string
s_pauseToMain	./src/PauseState.cpp	/^void PauseState::s_pauseToMain()$/;"	f	class:PauseState	typeref:typename:void
s_playID	./src/PlayState.cpp	/^const std::string PlayState::s_playID = "PLAY";$/;"	m	class:PlayState	typeref:typename:const std::string
s_playID	./src/PlayState.h	/^        static const std::string s_playID;$/;"	m	class:PlayState	typeref:typename:const std::string
s_restartPlay	./src/GameOverState.cpp	/^void GameOverState::s_restartPlay()$/;"	f	class:GameOverState	typeref:typename:void
s_resumePlay	./src/PauseState.cpp	/^void PauseState::s_resumePlay()$/;"	f	class:PauseState	typeref:typename:void
sentinel	./src/lib/tinyxml.h	/^	TiXmlAttribute sentinel;$/;"	m	class:TiXmlAttributeSet	typeref:typename:TiXmlAttribute
setCallback	./src/MenuButton.h	/^        void setCallback(void(*callback)()) { m_callback = callback; }$/;"	f	class:MenuButton	typeref:typename:void
setCallbacks	./src/GameOverState.cpp	/^void GameOverState::setCallbacks(const std::vector<Callback>& callbacks)$/;"	f	class:GameOverState	typeref:typename:void
setCallbacks	./src/MainMenuState.cpp	/^void MainMenuState::setCallbacks(const std::vector<Callback>& callbacks)$/;"	f	class:MainMenuState	typeref:typename:void
setCallbacks	./src/PauseState.cpp	/^void PauseState::setCallbacks(const std::vector<Callback>& callbacks)$/;"	f	class:PauseState	typeref:typename:void
setX	./src/Vector2D.h	/^        void setX(float x) { m_x = x; }$/;"	f	class:Vector2D	typeref:typename:void
setY	./src/Vector2D.h	/^        void setY(float y) { m_y = y; }$/;"	f	class:Vector2D	typeref:typename:void
set_size	./src/lib/tinystr.h	/^	void set_size(size_type sz) { rep_->str[ rep_->size = sz ] = '\\0'; }$/;"	f	class:TiXmlString	typeref:typename:void
simpleTextPrint	./src/lib/tinyxml.h	/^	bool simpleTextPrint;$/;"	m	class:TiXmlPrinter	typeref:typename:bool
size	./src/lib/tinystr.h	/^		size_type size, capacity;$/;"	m	struct:TiXmlString::Rep	typeref:typename:size_type
size	./src/lib/tinystr.h	/^	size_type size () const { return rep_->size; }$/;"	f	class:TiXmlString	typeref:typename:size_type
size_type	./src/lib/tinystr.h	/^  	typedef size_t size_type;$/;"	t	class:TiXmlString	typeref:typename:size_t
stamp	./src/lib/tinyxmlparser.cpp	/^	const char*		stamp;$/;"	m	class:TiXmlParsingData	typeref:typename:const char *	file:
standalone	./src/lib/tinyxml.h	/^	TIXML_STRING standalone;$/;"	m	class:TiXmlDeclaration	typeref:typename:TIXML_STRING
start	./src/lib/tinystr.h	/^	char* start() const { return rep_->str; }$/;"	f	class:TiXmlString	typeref:typename:char *
str	./src/lib/tinystr.h	/^		char str[1];$/;"	m	struct:TiXmlString::Rep	typeref:typename:char[1]
str	./src/lib/tinyxml.h	/^		const char*     str;$/;"	m	struct:TiXmlBase::Entity	typeref:typename:const char *
strLength	./src/lib/tinyxml.h	/^		unsigned int	strLength;$/;"	m	struct:TiXmlBase::Entity	typeref:typename:unsigned int
swap	./src/lib/tinystr.h	/^	void swap (TiXmlString& other)$/;"	f	class:TiXmlString	typeref:typename:void
tabsize	./src/lib/tinyxml.h	/^	int tabsize;$/;"	m	class:TiXmlDocument	typeref:typename:int
tabsize	./src/lib/tinyxmlparser.cpp	/^	int				tabsize;$/;"	m	class:TiXmlParsingData	typeref:typename:int	file:
type	./src/lib/tinyxml.h	/^	NodeType		type;$/;"	m	class:TiXmlNode	typeref:typename:NodeType
update	./src/AnimatedGraphic.cpp	/^void AnimatedGraphic::update()$/;"	f	class:AnimatedGraphic	typeref:typename:void
update	./src/Enemy.cpp	/^void Enemy::update()$/;"	f	class:Enemy	typeref:typename:void
update	./src/Game.cpp	/^void Game::update()$/;"	f	class:Game	typeref:typename:void
update	./src/GameOverState.cpp	/^void GameOverState::update()$/;"	f	class:GameOverState	typeref:typename:void
update	./src/GameStateMachine.cpp	/^void GameStateMachine::update()$/;"	f	class:GameStateMachine	typeref:typename:void
update	./src/InputHandler.cpp	/^void InputHandler::update()$/;"	f	class:InputHandler	typeref:typename:void
update	./src/MainMenuState.cpp	/^void MainMenuState::update()$/;"	f	class:MainMenuState	typeref:typename:void
update	./src/MenuButton.cpp	/^void MenuButton::update()$/;"	f	class:MenuButton	typeref:typename:void
update	./src/PauseState.cpp	/^void PauseState::update()$/;"	f	class:PauseState	typeref:typename:void
update	./src/PlayState.cpp	/^void PlayState::update()$/;"	f	class:PlayState	typeref:typename:void
update	./src/Player.cpp	/^void Player::update()$/;"	f	class:Player	typeref:typename:void
update	./src/SDLGameObject.cpp	/^void SDLGameObject::update()$/;"	f	class:SDLGameObject	typeref:typename:void
useMicrosoftBOM	./src/lib/tinyxml.h	/^	bool useMicrosoftBOM;		\/\/ the UTF-8 BOM were found when read. Note this, and try to write.$/;"	m	class:TiXmlDocument	typeref:typename:bool
userData	./src/lib/tinyxml.h	/^	void*			userData;$/;"	m	class:TiXmlBase	typeref:typename:void *
utf8ByteTable	./src/lib/tinyxml.h	/^	static const int utf8ByteTable[256];$/;"	m	class:TiXmlBase	typeref:typename:const int[256]
utf8ByteTable	./src/lib/tinyxmlparser.cpp	/^const int TiXmlBase::utf8ByteTable[256] = $/;"	m	class:TiXmlBase	typeref:typename:const int[256]
value	./src/lib/tinyxml.h	/^	TIXML_STRING	value;$/;"	m	class:TiXmlNode	typeref:typename:TIXML_STRING
value	./src/lib/tinyxml.h	/^	TIXML_STRING value;$/;"	m	class:TiXmlAttribute	typeref:typename:TIXML_STRING
version	./src/lib/tinyxml.h	/^	TIXML_STRING version;$/;"	m	class:TiXmlDeclaration	typeref:typename:TIXML_STRING
xvalue	./src/InputHandler.cpp	/^int InputHandler::xvalue(int joy, int stick)$/;"	f	class:InputHandler	typeref:typename:int
yvalue	./src/InputHandler.cpp	/^int InputHandler::yvalue(int joy, int stick)$/;"	f	class:InputHandler	typeref:typename:int
~BaseCreator	./src/GameObjectFactory.h	/^        virtual ~BaseCreator() {}$/;"	f	class:BaseCreator
~Game	./src/Game.h	/^        ~Game() {}$/;"	f	class:Game
~GameObject	./src/GameObject.h	/^        virtual ~GameObject() {}$/;"	f	class:GameObject
~InputHandler	./src/InputHandler.h	/^        ~InputHandler() { delete m_mousePosition; }$/;"	f	class:InputHandler
~TiXmlAttributeSet	./src/lib/tinyxml.cpp	/^TiXmlAttributeSet::~TiXmlAttributeSet()$/;"	f	class:TiXmlAttributeSet
~TiXmlBase	./src/lib/tinyxml.h	/^	virtual ~TiXmlBase()			{}$/;"	f	class:TiXmlBase
~TiXmlComment	./src/lib/tinyxml.h	/^	virtual ~TiXmlComment()	{}$/;"	f	class:TiXmlComment
~TiXmlDeclaration	./src/lib/tinyxml.h	/^	virtual ~TiXmlDeclaration()	{}$/;"	f	class:TiXmlDeclaration
~TiXmlDocument	./src/lib/tinyxml.h	/^	virtual ~TiXmlDocument() {}$/;"	f	class:TiXmlDocument
~TiXmlElement	./src/lib/tinyxml.cpp	/^TiXmlElement::~TiXmlElement()$/;"	f	class:TiXmlElement
~TiXmlNode	./src/lib/tinyxml.cpp	/^TiXmlNode::~TiXmlNode()$/;"	f	class:TiXmlNode
~TiXmlString	./src/lib/tinystr.h	/^	~TiXmlString ()$/;"	f	class:TiXmlString
~TiXmlText	./src/lib/tinyxml.h	/^	virtual ~TiXmlText() {}$/;"	f	class:TiXmlText
~TiXmlUnknown	./src/lib/tinyxml.h	/^	virtual ~TiXmlUnknown() {}$/;"	f	class:TiXmlUnknown
~TiXmlVisitor	./src/lib/tinyxml.h	/^	virtual ~TiXmlVisitor() {}$/;"	f	class:TiXmlVisitor
