!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C++	M,module	/modules/
!_TAG_KIND_DESCRIPTION!C++	P,partition	/partitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/liurs/github/sdl2/stu/chpt5/state/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/653ca9204/
!_TAG_ROLE_DESCRIPTION!C++!header	exported	/exported with "exported imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!module	imported	/imported with "imported ..."/
!_TAG_ROLE_DESCRIPTION!C++!module	partOwner	/used for specifying a partition/
!_TAG_ROLE_DESCRIPTION!C++!partition	imported	/imported with "imported ..."/
DELAY_TIME	./src/main.cpp	/^const int DELAY_TIME = 1000.0f \/ FPS;$/;"	v	typeref:typename:const int
Enemy	./src/Enemy.cpp	/^Enemy::Enemy(const LoaderParams* pParams) : SDLGameObject(pParams) {}$/;"	f	class:Enemy
Enemy	./src/Enemy.h	/^class Enemy : public SDLGameObject$/;"	c
FPS	./src/main.cpp	/^const int FPS = 165;$/;"	v	typeref:typename:const int
Game	./src/Game.h	/^        Game() {}$/;"	f	class:Game
Game	./src/Game.h	/^class Game$/;"	c
GameObject	./src/GameObject.h	/^        GameObject(const LoaderParams* pParams) {}$/;"	f	class:GameObject
GameObject	./src/GameObject.h	/^class GameObject$/;"	c
GameState	./src/GameState.h	/^class GameState$/;"	c
GameStateMachine	./src/GameStateMachine.h	/^class GameStateMachine$/;"	c
InputHandler	./src/InputHandler.cpp	/^InputHandler::InputHandler() : m_mousePosition(new Vector2D(0, 0))$/;"	f	class:InputHandler
InputHandler	./src/InputHandler.h	/^class InputHandler$/;"	c
Instance	./src/Game.h	/^        static Game* Instance()$/;"	f	class:Game	typeref:typename:Game *
Instance	./src/InputHandler.h	/^        static InputHandler* Instance()$/;"	f	class:InputHandler	typeref:typename:InputHandler *
Instance	./src/TextureManager.h	/^        static TextureManager* Instance()$/;"	f	class:TextureManager	typeref:typename:TextureManager *
LEFT	./src/InputHandler.h	/^	LEFT = 0,$/;"	e	enum:mouse_buttons
LoaderParams	./src/LoaderParams.h	/^        LoaderParams(int x, int y, int width, int height, std::string textureID) : m_x(x), m_y(y/;"	f	class:LoaderParams
LoaderParams	./src/LoaderParams.h	/^class LoaderParams$/;"	c
MIDDLE	./src/InputHandler.h	/^	MIDDLE = 1,$/;"	e	enum:mouse_buttons
MenuState	./src/MenuState.h	/^class MenuState : public GameState$/;"	c
PlayState	./src/PlayState.h	/^class PlayState : public GameState$/;"	c
Player	./src/Player.cpp	/^Player::Player(const LoaderParams* pParams) : SDLGameObject(pParams) {}$/;"	f	class:Player
Player	./src/Player.h	/^class Player : public SDLGameObject$/;"	c
RIGHT	./src/InputHandler.h	/^	RIGHT = 2$/;"	e	enum:mouse_buttons
SDLGameObject	./src/SDLGameObject.cpp	/^SDLGameObject::SDLGameObject(const LoaderParams* pParams) : GameObject(pParams), m_position(pPar/;"	f	class:SDLGameObject
SDLGameObject	./src/SDLGameObject.h	/^class SDLGameObject : public GameObject$/;"	c
TextureManager	./src/TextureManager.h	/^        TextureManager() {}$/;"	f	class:TextureManager
TextureManager	./src/TextureManager.h	/^class TextureManager$/;"	c
TheGame	./src/Game.h	/^typedef Game TheGame;$/;"	t	typeref:typename:Game
TheInputHandler	./src/InputHandler.h	/^typedef InputHandler TheInputHandler;$/;"	t	typeref:typename:InputHandler
TheTextureManager	./src/TextureManager.h	/^typedef TextureManager TheTextureManager;$/;"	t	typeref:typename:TextureManager
Vector2D	./src/Vector2D.h	/^        Vector2D(float x, float y): m_x(x), m_y(y) {}$/;"	f	class:Vector2D
Vector2D	./src/Vector2D.h	/^class Vector2D$/;"	c
__Enemy__	./src/Enemy.h	/^#define __Enemy__$/;"	d
__GameObject__	./src/GameObject.h	/^#define __GameObject__$/;"	d
__GameStateMachine__	./src/GameStateMachine.h	/^#define __GameStateMachine__$/;"	d
__GameState__	./src/GameState.h	/^#define __GameState__$/;"	d
__Game__	./src/Game.h	/^#define __Game__$/;"	d
__InputHandler__	./src/InputHandler.h	/^#define __InputHandler__$/;"	d
__LoaderParams__	./src/LoaderParams.h	/^#define __LoaderParams__$/;"	d
__MenuState__	./src/MenuState.h	/^#define __MenuState__$/;"	d
__PlayState__	./src/PlayState.h	/^#define __PlayState__$/;"	d
__Player__	./src/Player.h	/^#define __Player__$/;"	d
__SDLGameObject__	./src/SDLGameObject.h	/^#define __SDLGameObject__$/;"	d
__TextureManager__	./src/TextureManager.h	/^#define __TextureManager__$/;"	d
__Vector2D__	./src/Vector2D.h	/^#define __Vector2D__$/;"	d
changeState	./src/GameStateMachine.cpp	/^void GameStateMachine::changeState(GameState* pState)$/;"	f	class:GameStateMachine	typeref:typename:void
clean	./src/Enemy.cpp	/^void Enemy::clean()$/;"	f	class:Enemy	typeref:typename:void
clean	./src/Game.cpp	/^void Game::clean()$/;"	f	class:Game	typeref:typename:void
clean	./src/InputHandler.cpp	/^void InputHandler::clean()$/;"	f	class:InputHandler	typeref:typename:void
clean	./src/Player.cpp	/^void Player::clean() { }$/;"	f	class:Player	typeref:typename:void
clean	./src/SDLGameObject.h	/^        virtual void clean() {};$/;"	f	class:SDLGameObject	typeref:typename:void
draw	./src/Enemy.cpp	/^void Enemy::draw()$/;"	f	class:Enemy	typeref:typename:void
draw	./src/Player.cpp	/^void Player::draw()$/;"	f	class:Player	typeref:typename:void
draw	./src/SDLGameObject.cpp	/^void SDLGameObject::draw()$/;"	f	class:SDLGameObject	typeref:typename:void
draw	./src/TextureManager.cpp	/^void TextureManager::draw(std::string id, int x, int y, int width, int height, SDL_Renderer* pRe/;"	f	class:TextureManager	typeref:typename:void
drawFrame	./src/TextureManager.cpp	/^void TextureManager::drawFrame(std::string id, int x, int y, int width, int height, int currentR/;"	f	class:TextureManager	typeref:typename:void
getButtonState	./src/InputHandler.h	/^        bool getButtonState(int joy, int buttonNumber)$/;"	f	class:InputHandler	typeref:typename:bool
getHeight	./src/LoaderParams.h	/^        int getHeight() const { return m_height; }$/;"	f	class:LoaderParams	typeref:typename:int
getMouseButtonState	./src/InputHandler.h	/^        bool getMouseButtonState(int buttonNumber)$/;"	f	class:InputHandler	typeref:typename:bool
getMousePosition	./src/InputHandler.h	/^        Vector2D* getMousePosition()$/;"	f	class:InputHandler	typeref:typename:Vector2D *
getRenderer	./src/Game.h	/^        SDL_Renderer* getRenderer() const { return m_pRenderer; }$/;"	f	class:Game	typeref:typename:SDL_Renderer *
getStateID	./src/MenuState.h	/^        virtual std::string getStateID() const { return s_menuID; }$/;"	f	class:MenuState	typeref:typename:std::string
getStateID	./src/PlayState.h	/^        virtual std::string getStateID() const { return s_playID; }$/;"	f	class:PlayState	typeref:typename:std::string
getTextureID	./src/LoaderParams.h	/^        std::string getTextureID() const { return m_textureID; }$/;"	f	class:LoaderParams	typeref:typename:std::string
getWidth	./src/LoaderParams.h	/^        int getWidth() const { return m_width; }$/;"	f	class:LoaderParams	typeref:typename:int
getX	./src/LoaderParams.h	/^        int getX() const { return m_x; }$/;"	f	class:LoaderParams	typeref:typename:int
getX	./src/Vector2D.h	/^        float getX() { return m_x; }$/;"	f	class:Vector2D	typeref:typename:float
getY	./src/LoaderParams.h	/^        int getY() const { return m_y; }$/;"	f	class:LoaderParams	typeref:typename:int
getY	./src/Vector2D.h	/^        float getY() { return m_y; }$/;"	f	class:Vector2D	typeref:typename:float
handleEvents	./src/Game.cpp	/^void Game::handleEvents()$/;"	f	class:Game	typeref:typename:void
handleInput	./src/Player.cpp	/^void Player::handleInput()$/;"	f	class:Player	typeref:typename:void
init	./src/Game.cpp	/^bool Game::init(const char* title, int x_pos, int y_pos, int width,$/;"	f	class:Game	typeref:typename:bool
init_obj	./src/Game.cpp	/^void Game::init_obj()$/;"	f	class:Game	typeref:typename:void
initialiseJoysticks	./src/InputHandler.cpp	/^void InputHandler::initialiseJoysticks()$/;"	f	class:InputHandler	typeref:typename:void
isKeyDown	./src/InputHandler.cpp	/^bool InputHandler::isKeyDown(SDL_Scancode key)$/;"	f	class:InputHandler	typeref:typename:bool
joysticksInitialised	./src/InputHandler.h	/^        bool joysticksInitialised() { return m_bJoysticksInitialised; }$/;"	f	class:InputHandler	typeref:typename:bool
length	./src/Vector2D.h	/^        float length() { return sqrt(m_x * m_x + m_y * m_y); }$/;"	f	class:Vector2D	typeref:typename:float
load	./src/TextureManager.cpp	/^bool TextureManager::load(std::string fileName,std::string id, $/;"	f	class:TextureManager	typeref:typename:bool
m_acceleration	./src/SDLGameObject.h	/^        Vector2D m_acceleration;$/;"	m	class:SDLGameObject	typeref:typename:Vector2D
m_bJoysticksInitialised	./src/InputHandler.h	/^        bool m_bJoysticksInitialised;$/;"	m	class:InputHandler	typeref:typename:bool
m_bRunning	./src/Game.h	/^        bool m_bRunning;$/;"	m	class:Game	typeref:typename:bool
m_buttonStates	./src/InputHandler.h	/^        std::vector<std::vector<bool>> m_buttonStates;$/;"	m	class:InputHandler	typeref:typename:std::vector<std::vector<bool>>
m_currentFrame	./src/Game.h	/^        int m_currentFrame;$/;"	m	class:Game	typeref:typename:int
m_currentFrame	./src/SDLGameObject.h	/^        int m_currentFrame;$/;"	m	class:SDLGameObject	typeref:typename:int
m_currentRow	./src/SDLGameObject.h	/^        int m_currentRow;$/;"	m	class:SDLGameObject	typeref:typename:int
m_gameObjects	./src/Game.h	/^        std::vector<GameObject*> m_gameObjects;$/;"	m	class:Game	typeref:typename:std::vector<GameObject * >
m_gameStates	./src/GameStateMachine.h	/^        std::vector<GameState*> m_gameStates;$/;"	m	class:GameStateMachine	typeref:typename:std::vector<GameState * >
m_height	./src/LoaderParams.h	/^        int m_height;$/;"	m	class:LoaderParams	typeref:typename:int
m_height	./src/SDLGameObject.h	/^        int m_height;$/;"	m	class:SDLGameObject	typeref:typename:int
m_joystickDeadZone	./src/InputHandler.h	/^        const int m_joystickDeadZone = 10000;$/;"	m	class:InputHandler	typeref:typename:const int
m_joystickValues	./src/InputHandler.h	/^        std::vector<std::pair<Vector2D*, Vector2D*>> m_joystickValues;$/;"	m	class:InputHandler	typeref:typename:std::vector<std::pair<Vector2D *,Vector2D * >>
m_joysticks	./src/InputHandler.h	/^        std::vector<SDL_Joystick*> m_joysticks;$/;"	m	class:InputHandler	typeref:typename:std::vector<SDL_Joystick * >
m_keystates	./src/InputHandler.h	/^        const Uint8* m_keystates;$/;"	m	class:InputHandler	typeref:typename:const Uint8 *
m_mouseButtonStates	./src/InputHandler.h	/^        std::vector<bool> m_mouseButtonStates;$/;"	m	class:InputHandler	typeref:typename:std::vector<bool>
m_mousePosition	./src/InputHandler.h	/^        Vector2D* m_mousePosition;$/;"	m	class:InputHandler	typeref:typename:Vector2D *
m_pRenderer	./src/Game.h	/^        SDL_Renderer* m_pRenderer;$/;"	m	class:Game	typeref:typename:SDL_Renderer *
m_pWindow	./src/Game.h	/^        SDL_Window* m_pWindow;$/;"	m	class:Game	typeref:typename:SDL_Window *
m_position	./src/SDLGameObject.h	/^        Vector2D m_position;$/;"	m	class:SDLGameObject	typeref:typename:Vector2D
m_textureID	./src/LoaderParams.h	/^        std::string m_textureID;$/;"	m	class:LoaderParams	typeref:typename:std::string
m_textureID	./src/SDLGameObject.h	/^        std::string m_textureID;$/;"	m	class:SDLGameObject	typeref:typename:std::string
m_textureMap	./src/TextureManager.h	/^        std::map<std::string, SDL_Texture*> m_textureMap;$/;"	m	class:TextureManager	typeref:typename:std::map<std::string,SDL_Texture * >
m_velocity	./src/SDLGameObject.h	/^        Vector2D m_velocity;$/;"	m	class:SDLGameObject	typeref:typename:Vector2D
m_width	./src/LoaderParams.h	/^        int m_width;$/;"	m	class:LoaderParams	typeref:typename:int
m_width	./src/SDLGameObject.h	/^        int m_width;$/;"	m	class:SDLGameObject	typeref:typename:int
m_x	./src/LoaderParams.h	/^        int m_x;$/;"	m	class:LoaderParams	typeref:typename:int
m_x	./src/Vector2D.h	/^        float m_x;$/;"	m	class:Vector2D	typeref:typename:float
m_y	./src/LoaderParams.h	/^        int m_y;$/;"	m	class:LoaderParams	typeref:typename:int
m_y	./src/Vector2D.h	/^        float m_y;$/;"	m	class:Vector2D	typeref:typename:float
main	./src/main.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
mouse_buttons	./src/InputHandler.h	/^enum mouse_buttons$/;"	g
normalize	./src/Vector2D.h	/^        void normalize()$/;"	f	class:Vector2D	typeref:typename:void
onEnter	./src/MenuState.cpp	/^bool MenuState::onEnter()$/;"	f	class:MenuState	typeref:typename:bool
onEnter	./src/PlayState.cpp	/^bool PlayState::onEnter()$/;"	f	class:PlayState	typeref:typename:bool
onExit	./src/MenuState.cpp	/^bool MenuState::onExit()$/;"	f	class:MenuState	typeref:typename:bool
onExit	./src/PlayState.cpp	/^bool PlayState::onExit()$/;"	f	class:PlayState	typeref:typename:bool
onJoystickAxisMove	./src/InputHandler.cpp	/^void InputHandler::onJoystickAxisMove(SDL_Event& event) $/;"	f	class:InputHandler	typeref:typename:void
onJoystickButtonDown	./src/InputHandler.cpp	/^void InputHandler::onJoystickButtonDown(SDL_Event& event) $/;"	f	class:InputHandler	typeref:typename:void
onJoystickButtonUp	./src/InputHandler.cpp	/^void InputHandler::onJoystickButtonUp(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
onKeyDown	./src/InputHandler.cpp	/^void InputHandler::onKeyDown()$/;"	f	class:InputHandler	typeref:typename:void
onKeyUp	./src/InputHandler.cpp	/^void InputHandler::onKeyUp()$/;"	f	class:InputHandler	typeref:typename:void
onMouseButtonDown	./src/InputHandler.cpp	/^void InputHandler::onMouseButtonDown(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
onMouseButtonUp	./src/InputHandler.cpp	/^void InputHandler::onMouseButtonUp(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
onMouseMove	./src/InputHandler.cpp	/^void InputHandler::onMouseMove(SDL_Event& event)$/;"	f	class:InputHandler	typeref:typename:void
operator *	./src/Vector2D.h	/^        Vector2D operator*(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator *=	./src/Vector2D.h	/^        Vector2D& operator*=(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator +	./src/Vector2D.h	/^        Vector2D operator+(const Vector2D& v2) const$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator +=	./src/Vector2D.h	/^        Vector2D& operator+=(const Vector2D& v2)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator -	./src/Vector2D.h	/^        Vector2D operator-(const Vector2D& v2) const$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator -=	./src/Vector2D.h	/^        Vector2D& operator-=(const Vector2D& v2)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
operator /	./src/Vector2D.h	/^        Vector2D operator\/(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D
operator /=	./src/Vector2D.h	/^        Vector2D& operator\/=(float scalar)$/;"	f	class:Vector2D	typeref:typename:Vector2D &
popState	./src/GameStateMachine.cpp	/^void GameStateMachine::popState()$/;"	f	class:GameStateMachine	typeref:typename:void
pushState	./src/GameStateMachine.cpp	/^void GameStateMachine::pushState(GameState *pState)$/;"	f	class:GameStateMachine	typeref:typename:void
quit	./src/Game.h	/^	    void quit() { m_bRunning = false; }$/;"	f	class:Game	typeref:typename:void
render	./src/Game.cpp	/^void Game::render()$/;"	f	class:Game	typeref:typename:void
render	./src/GameStateMachine.cpp	/^void GameStateMachine::render()$/;"	f	class:GameStateMachine	typeref:typename:void
render	./src/MenuState.cpp	/^void MenuState::render()$/;"	f	class:MenuState	typeref:typename:void
render	./src/PlayState.cpp	/^void PlayState::render()$/;"	f	class:PlayState	typeref:typename:void
running	./src/Game.h	/^        bool running() { return m_bRunning; }$/;"	f	class:Game	typeref:typename:bool
s_menuID	./src/MenuState.cpp	/^const std::string MenuState::s_menuID = "MENU";$/;"	m	class:MenuState	typeref:typename:const std::string
s_menuID	./src/MenuState.h	/^        static const std::string s_menuID;$/;"	m	class:MenuState	typeref:typename:const std::string
s_pInstance	./src/Game.cpp	/^Game* Game::s_pInstance = 0;$/;"	m	class:Game	typeref:typename:Game *
s_pInstance	./src/Game.h	/^        static Game* s_pInstance;$/;"	m	class:Game	typeref:typename:Game *
s_pInstance	./src/InputHandler.cpp	/^InputHandler* InputHandler::s_pInstance = 0;$/;"	m	class:InputHandler	typeref:typename:InputHandler *
s_pInstance	./src/InputHandler.h	/^        static InputHandler* s_pInstance;$/;"	m	class:InputHandler	typeref:typename:InputHandler *
s_pInstance	./src/TextureManager.cpp	/^TextureManager* TextureManager::s_pInstance = 0;$/;"	m	class:TextureManager	typeref:typename:TextureManager *
s_pInstance	./src/TextureManager.h	/^        static TextureManager* s_pInstance;$/;"	m	class:TextureManager	typeref:typename:TextureManager *
s_playID	./src/PlayState.cpp	/^const std::string PlayState::s_playID = "PLAY";$/;"	m	class:PlayState	typeref:typename:const std::string
s_playID	./src/PlayState.h	/^        static const std::string s_playID;$/;"	m	class:PlayState	typeref:typename:const std::string
setX	./src/Vector2D.h	/^        void setX(float x) { m_x = x; }$/;"	f	class:Vector2D	typeref:typename:void
setY	./src/Vector2D.h	/^        void setY(float y) { m_y = y; }$/;"	f	class:Vector2D	typeref:typename:void
update	./src/Enemy.cpp	/^void Enemy::update()$/;"	f	class:Enemy	typeref:typename:void
update	./src/Game.cpp	/^void Game::update()$/;"	f	class:Game	typeref:typename:void
update	./src/GameStateMachine.cpp	/^void GameStateMachine::update()$/;"	f	class:GameStateMachine	typeref:typename:void
update	./src/InputHandler.cpp	/^void InputHandler::update()$/;"	f	class:InputHandler	typeref:typename:void
update	./src/MenuState.cpp	/^void MenuState::update()$/;"	f	class:MenuState	typeref:typename:void
update	./src/PlayState.cpp	/^void PlayState::update()$/;"	f	class:PlayState	typeref:typename:void
update	./src/Player.cpp	/^void Player::update()$/;"	f	class:Player	typeref:typename:void
update	./src/SDLGameObject.cpp	/^void SDLGameObject::update()$/;"	f	class:SDLGameObject	typeref:typename:void
xvalue	./src/InputHandler.cpp	/^int InputHandler::xvalue(int joy, int stick)$/;"	f	class:InputHandler	typeref:typename:int
yvalue	./src/InputHandler.cpp	/^int InputHandler::yvalue(int joy, int stick)$/;"	f	class:InputHandler	typeref:typename:int
~Game	./src/Game.h	/^        ~Game() {}$/;"	f	class:Game
~GameObject	./src/GameObject.h	/^        virtual ~GameObject() {}$/;"	f	class:GameObject
~InputHandler	./src/InputHandler.h	/^        ~InputHandler() { delete m_mousePosition; }$/;"	f	class:InputHandler
